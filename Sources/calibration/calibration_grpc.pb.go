// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: calibration.proto

package calibration

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CalibrationServiceClient is the client API for CalibrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalibrationServiceClient interface {
	// Perform gyro calibration.
	SubscribeCalibrateGyro(ctx context.Context, in *SubscribeCalibrateGyroRequest, opts ...grpc.CallOption) (CalibrationService_SubscribeCalibrateGyroClient, error)
	// Perform accelerometer calibration.
	SubscribeCalibrateAccelerometer(ctx context.Context, in *SubscribeCalibrateAccelerometerRequest, opts ...grpc.CallOption) (CalibrationService_SubscribeCalibrateAccelerometerClient, error)
	// Perform magnetometer calibration.
	SubscribeCalibrateMagnetometer(ctx context.Context, in *SubscribeCalibrateMagnetometerRequest, opts ...grpc.CallOption) (CalibrationService_SubscribeCalibrateMagnetometerClient, error)
	// Perform board level horizon calibration.
	SubscribeCalibrateLevelHorizon(ctx context.Context, in *SubscribeCalibrateLevelHorizonRequest, opts ...grpc.CallOption) (CalibrationService_SubscribeCalibrateLevelHorizonClient, error)
	// Perform gimbal accelerometer calibration.
	SubscribeCalibrateGimbalAccelerometer(ctx context.Context, in *SubscribeCalibrateGimbalAccelerometerRequest, opts ...grpc.CallOption) (CalibrationService_SubscribeCalibrateGimbalAccelerometerClient, error)
	// Cancel ongoing calibration process.
	Cancel(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*CancelResponse, error)
}

type calibrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCalibrationServiceClient(cc grpc.ClientConnInterface) CalibrationServiceClient {
	return &calibrationServiceClient{cc}
}

func (c *calibrationServiceClient) SubscribeCalibrateGyro(ctx context.Context, in *SubscribeCalibrateGyroRequest, opts ...grpc.CallOption) (CalibrationService_SubscribeCalibrateGyroClient, error) {
	stream, err := c.cc.NewStream(ctx, &CalibrationService_ServiceDesc.Streams[0], "/mavsdk.rpc.calibration.CalibrationService/SubscribeCalibrateGyro", opts...)
	if err != nil {
		return nil, err
	}
	x := &calibrationServiceSubscribeCalibrateGyroClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CalibrationService_SubscribeCalibrateGyroClient interface {
	Recv() (*CalibrateGyroResponse, error)
	grpc.ClientStream
}

type calibrationServiceSubscribeCalibrateGyroClient struct {
	grpc.ClientStream
}

func (x *calibrationServiceSubscribeCalibrateGyroClient) Recv() (*CalibrateGyroResponse, error) {
	m := new(CalibrateGyroResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calibrationServiceClient) SubscribeCalibrateAccelerometer(ctx context.Context, in *SubscribeCalibrateAccelerometerRequest, opts ...grpc.CallOption) (CalibrationService_SubscribeCalibrateAccelerometerClient, error) {
	stream, err := c.cc.NewStream(ctx, &CalibrationService_ServiceDesc.Streams[1], "/mavsdk.rpc.calibration.CalibrationService/SubscribeCalibrateAccelerometer", opts...)
	if err != nil {
		return nil, err
	}
	x := &calibrationServiceSubscribeCalibrateAccelerometerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CalibrationService_SubscribeCalibrateAccelerometerClient interface {
	Recv() (*CalibrateAccelerometerResponse, error)
	grpc.ClientStream
}

type calibrationServiceSubscribeCalibrateAccelerometerClient struct {
	grpc.ClientStream
}

func (x *calibrationServiceSubscribeCalibrateAccelerometerClient) Recv() (*CalibrateAccelerometerResponse, error) {
	m := new(CalibrateAccelerometerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calibrationServiceClient) SubscribeCalibrateMagnetometer(ctx context.Context, in *SubscribeCalibrateMagnetometerRequest, opts ...grpc.CallOption) (CalibrationService_SubscribeCalibrateMagnetometerClient, error) {
	stream, err := c.cc.NewStream(ctx, &CalibrationService_ServiceDesc.Streams[2], "/mavsdk.rpc.calibration.CalibrationService/SubscribeCalibrateMagnetometer", opts...)
	if err != nil {
		return nil, err
	}
	x := &calibrationServiceSubscribeCalibrateMagnetometerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CalibrationService_SubscribeCalibrateMagnetometerClient interface {
	Recv() (*CalibrateMagnetometerResponse, error)
	grpc.ClientStream
}

type calibrationServiceSubscribeCalibrateMagnetometerClient struct {
	grpc.ClientStream
}

func (x *calibrationServiceSubscribeCalibrateMagnetometerClient) Recv() (*CalibrateMagnetometerResponse, error) {
	m := new(CalibrateMagnetometerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calibrationServiceClient) SubscribeCalibrateLevelHorizon(ctx context.Context, in *SubscribeCalibrateLevelHorizonRequest, opts ...grpc.CallOption) (CalibrationService_SubscribeCalibrateLevelHorizonClient, error) {
	stream, err := c.cc.NewStream(ctx, &CalibrationService_ServiceDesc.Streams[3], "/mavsdk.rpc.calibration.CalibrationService/SubscribeCalibrateLevelHorizon", opts...)
	if err != nil {
		return nil, err
	}
	x := &calibrationServiceSubscribeCalibrateLevelHorizonClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CalibrationService_SubscribeCalibrateLevelHorizonClient interface {
	Recv() (*CalibrateLevelHorizonResponse, error)
	grpc.ClientStream
}

type calibrationServiceSubscribeCalibrateLevelHorizonClient struct {
	grpc.ClientStream
}

func (x *calibrationServiceSubscribeCalibrateLevelHorizonClient) Recv() (*CalibrateLevelHorizonResponse, error) {
	m := new(CalibrateLevelHorizonResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calibrationServiceClient) SubscribeCalibrateGimbalAccelerometer(ctx context.Context, in *SubscribeCalibrateGimbalAccelerometerRequest, opts ...grpc.CallOption) (CalibrationService_SubscribeCalibrateGimbalAccelerometerClient, error) {
	stream, err := c.cc.NewStream(ctx, &CalibrationService_ServiceDesc.Streams[4], "/mavsdk.rpc.calibration.CalibrationService/SubscribeCalibrateGimbalAccelerometer", opts...)
	if err != nil {
		return nil, err
	}
	x := &calibrationServiceSubscribeCalibrateGimbalAccelerometerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CalibrationService_SubscribeCalibrateGimbalAccelerometerClient interface {
	Recv() (*CalibrateGimbalAccelerometerResponse, error)
	grpc.ClientStream
}

type calibrationServiceSubscribeCalibrateGimbalAccelerometerClient struct {
	grpc.ClientStream
}

func (x *calibrationServiceSubscribeCalibrateGimbalAccelerometerClient) Recv() (*CalibrateGimbalAccelerometerResponse, error) {
	m := new(CalibrateGimbalAccelerometerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calibrationServiceClient) Cancel(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*CancelResponse, error) {
	out := new(CancelResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.calibration.CalibrationService/Cancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalibrationServiceServer is the server API for CalibrationService service.
// All implementations must embed UnimplementedCalibrationServiceServer
// for forward compatibility
type CalibrationServiceServer interface {
	// Perform gyro calibration.
	SubscribeCalibrateGyro(*SubscribeCalibrateGyroRequest, CalibrationService_SubscribeCalibrateGyroServer) error
	// Perform accelerometer calibration.
	SubscribeCalibrateAccelerometer(*SubscribeCalibrateAccelerometerRequest, CalibrationService_SubscribeCalibrateAccelerometerServer) error
	// Perform magnetometer calibration.
	SubscribeCalibrateMagnetometer(*SubscribeCalibrateMagnetometerRequest, CalibrationService_SubscribeCalibrateMagnetometerServer) error
	// Perform board level horizon calibration.
	SubscribeCalibrateLevelHorizon(*SubscribeCalibrateLevelHorizonRequest, CalibrationService_SubscribeCalibrateLevelHorizonServer) error
	// Perform gimbal accelerometer calibration.
	SubscribeCalibrateGimbalAccelerometer(*SubscribeCalibrateGimbalAccelerometerRequest, CalibrationService_SubscribeCalibrateGimbalAccelerometerServer) error
	// Cancel ongoing calibration process.
	Cancel(context.Context, *CancelRequest) (*CancelResponse, error)
	mustEmbedUnimplementedCalibrationServiceServer()
}

// UnimplementedCalibrationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCalibrationServiceServer struct {
}

func (UnimplementedCalibrationServiceServer) SubscribeCalibrateGyro(*SubscribeCalibrateGyroRequest, CalibrationService_SubscribeCalibrateGyroServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeCalibrateGyro not implemented")
}
func (UnimplementedCalibrationServiceServer) SubscribeCalibrateAccelerometer(*SubscribeCalibrateAccelerometerRequest, CalibrationService_SubscribeCalibrateAccelerometerServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeCalibrateAccelerometer not implemented")
}
func (UnimplementedCalibrationServiceServer) SubscribeCalibrateMagnetometer(*SubscribeCalibrateMagnetometerRequest, CalibrationService_SubscribeCalibrateMagnetometerServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeCalibrateMagnetometer not implemented")
}
func (UnimplementedCalibrationServiceServer) SubscribeCalibrateLevelHorizon(*SubscribeCalibrateLevelHorizonRequest, CalibrationService_SubscribeCalibrateLevelHorizonServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeCalibrateLevelHorizon not implemented")
}
func (UnimplementedCalibrationServiceServer) SubscribeCalibrateGimbalAccelerometer(*SubscribeCalibrateGimbalAccelerometerRequest, CalibrationService_SubscribeCalibrateGimbalAccelerometerServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeCalibrateGimbalAccelerometer not implemented")
}
func (UnimplementedCalibrationServiceServer) Cancel(context.Context, *CancelRequest) (*CancelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (UnimplementedCalibrationServiceServer) mustEmbedUnimplementedCalibrationServiceServer() {}

// UnsafeCalibrationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalibrationServiceServer will
// result in compilation errors.
type UnsafeCalibrationServiceServer interface {
	mustEmbedUnimplementedCalibrationServiceServer()
}

func RegisterCalibrationServiceServer(s grpc.ServiceRegistrar, srv CalibrationServiceServer) {
	s.RegisterService(&CalibrationService_ServiceDesc, srv)
}

func _CalibrationService_SubscribeCalibrateGyro_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeCalibrateGyroRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalibrationServiceServer).SubscribeCalibrateGyro(m, &calibrationServiceSubscribeCalibrateGyroServer{stream})
}

type CalibrationService_SubscribeCalibrateGyroServer interface {
	Send(*CalibrateGyroResponse) error
	grpc.ServerStream
}

type calibrationServiceSubscribeCalibrateGyroServer struct {
	grpc.ServerStream
}

func (x *calibrationServiceSubscribeCalibrateGyroServer) Send(m *CalibrateGyroResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CalibrationService_SubscribeCalibrateAccelerometer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeCalibrateAccelerometerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalibrationServiceServer).SubscribeCalibrateAccelerometer(m, &calibrationServiceSubscribeCalibrateAccelerometerServer{stream})
}

type CalibrationService_SubscribeCalibrateAccelerometerServer interface {
	Send(*CalibrateAccelerometerResponse) error
	grpc.ServerStream
}

type calibrationServiceSubscribeCalibrateAccelerometerServer struct {
	grpc.ServerStream
}

func (x *calibrationServiceSubscribeCalibrateAccelerometerServer) Send(m *CalibrateAccelerometerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CalibrationService_SubscribeCalibrateMagnetometer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeCalibrateMagnetometerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalibrationServiceServer).SubscribeCalibrateMagnetometer(m, &calibrationServiceSubscribeCalibrateMagnetometerServer{stream})
}

type CalibrationService_SubscribeCalibrateMagnetometerServer interface {
	Send(*CalibrateMagnetometerResponse) error
	grpc.ServerStream
}

type calibrationServiceSubscribeCalibrateMagnetometerServer struct {
	grpc.ServerStream
}

func (x *calibrationServiceSubscribeCalibrateMagnetometerServer) Send(m *CalibrateMagnetometerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CalibrationService_SubscribeCalibrateLevelHorizon_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeCalibrateLevelHorizonRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalibrationServiceServer).SubscribeCalibrateLevelHorizon(m, &calibrationServiceSubscribeCalibrateLevelHorizonServer{stream})
}

type CalibrationService_SubscribeCalibrateLevelHorizonServer interface {
	Send(*CalibrateLevelHorizonResponse) error
	grpc.ServerStream
}

type calibrationServiceSubscribeCalibrateLevelHorizonServer struct {
	grpc.ServerStream
}

func (x *calibrationServiceSubscribeCalibrateLevelHorizonServer) Send(m *CalibrateLevelHorizonResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CalibrationService_SubscribeCalibrateGimbalAccelerometer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeCalibrateGimbalAccelerometerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalibrationServiceServer).SubscribeCalibrateGimbalAccelerometer(m, &calibrationServiceSubscribeCalibrateGimbalAccelerometerServer{stream})
}

type CalibrationService_SubscribeCalibrateGimbalAccelerometerServer interface {
	Send(*CalibrateGimbalAccelerometerResponse) error
	grpc.ServerStream
}

type calibrationServiceSubscribeCalibrateGimbalAccelerometerServer struct {
	grpc.ServerStream
}

func (x *calibrationServiceSubscribeCalibrateGimbalAccelerometerServer) Send(m *CalibrateGimbalAccelerometerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CalibrationService_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalibrationServiceServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.calibration.CalibrationService/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalibrationServiceServer).Cancel(ctx, req.(*CancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CalibrationService_ServiceDesc is the grpc.ServiceDesc for CalibrationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CalibrationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mavsdk.rpc.calibration.CalibrationService",
	HandlerType: (*CalibrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Cancel",
			Handler:    _CalibrationService_Cancel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeCalibrateGyro",
			Handler:       _CalibrationService_SubscribeCalibrateGyro_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeCalibrateAccelerometer",
			Handler:       _CalibrationService_SubscribeCalibrateAccelerometer_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeCalibrateMagnetometer",
			Handler:       _CalibrationService_SubscribeCalibrateMagnetometer_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeCalibrateLevelHorizon",
			Handler:       _CalibrationService_SubscribeCalibrateLevelHorizon_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeCalibrateGimbalAccelerometer",
			Handler:       _CalibrationService_SubscribeCalibrateGimbalAccelerometer_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "calibration.proto",
}
