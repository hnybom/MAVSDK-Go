// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: mission_raw_server.proto

package mission_raw_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MissionRawServerServiceClient is the client API for MissionRawServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MissionRawServerServiceClient interface {
	// Subscribe to when a new mission is uploaded (asynchronous).
	SubscribeIncomingMission(ctx context.Context, in *SubscribeIncomingMissionRequest, opts ...grpc.CallOption) (MissionRawServerService_SubscribeIncomingMissionClient, error)
	// Subscribe to when a new current item is set
	SubscribeCurrentItemChanged(ctx context.Context, in *SubscribeCurrentItemChangedRequest, opts ...grpc.CallOption) (MissionRawServerService_SubscribeCurrentItemChangedClient, error)
	// Set Current item as completed
	SetCurrentItemComplete(ctx context.Context, in *SetCurrentItemCompleteRequest, opts ...grpc.CallOption) (*SetCurrentItemCompleteResponse, error)
	// Subscribe when a MISSION_CLEAR_ALL is received
	SubscribeClearAll(ctx context.Context, in *SubscribeClearAllRequest, opts ...grpc.CallOption) (MissionRawServerService_SubscribeClearAllClient, error)
}

type missionRawServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMissionRawServerServiceClient(cc grpc.ClientConnInterface) MissionRawServerServiceClient {
	return &missionRawServerServiceClient{cc}
}

func (c *missionRawServerServiceClient) SubscribeIncomingMission(ctx context.Context, in *SubscribeIncomingMissionRequest, opts ...grpc.CallOption) (MissionRawServerService_SubscribeIncomingMissionClient, error) {
	stream, err := c.cc.NewStream(ctx, &MissionRawServerService_ServiceDesc.Streams[0], "/mavsdk.rpc.mission_raw_server.MissionRawServerService/SubscribeIncomingMission", opts...)
	if err != nil {
		return nil, err
	}
	x := &missionRawServerServiceSubscribeIncomingMissionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MissionRawServerService_SubscribeIncomingMissionClient interface {
	Recv() (*IncomingMissionResponse, error)
	grpc.ClientStream
}

type missionRawServerServiceSubscribeIncomingMissionClient struct {
	grpc.ClientStream
}

func (x *missionRawServerServiceSubscribeIncomingMissionClient) Recv() (*IncomingMissionResponse, error) {
	m := new(IncomingMissionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *missionRawServerServiceClient) SubscribeCurrentItemChanged(ctx context.Context, in *SubscribeCurrentItemChangedRequest, opts ...grpc.CallOption) (MissionRawServerService_SubscribeCurrentItemChangedClient, error) {
	stream, err := c.cc.NewStream(ctx, &MissionRawServerService_ServiceDesc.Streams[1], "/mavsdk.rpc.mission_raw_server.MissionRawServerService/SubscribeCurrentItemChanged", opts...)
	if err != nil {
		return nil, err
	}
	x := &missionRawServerServiceSubscribeCurrentItemChangedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MissionRawServerService_SubscribeCurrentItemChangedClient interface {
	Recv() (*CurrentItemChangedResponse, error)
	grpc.ClientStream
}

type missionRawServerServiceSubscribeCurrentItemChangedClient struct {
	grpc.ClientStream
}

func (x *missionRawServerServiceSubscribeCurrentItemChangedClient) Recv() (*CurrentItemChangedResponse, error) {
	m := new(CurrentItemChangedResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *missionRawServerServiceClient) SetCurrentItemComplete(ctx context.Context, in *SetCurrentItemCompleteRequest, opts ...grpc.CallOption) (*SetCurrentItemCompleteResponse, error) {
	out := new(SetCurrentItemCompleteResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.mission_raw_server.MissionRawServerService/SetCurrentItemComplete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionRawServerServiceClient) SubscribeClearAll(ctx context.Context, in *SubscribeClearAllRequest, opts ...grpc.CallOption) (MissionRawServerService_SubscribeClearAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &MissionRawServerService_ServiceDesc.Streams[2], "/mavsdk.rpc.mission_raw_server.MissionRawServerService/SubscribeClearAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &missionRawServerServiceSubscribeClearAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MissionRawServerService_SubscribeClearAllClient interface {
	Recv() (*ClearAllResponse, error)
	grpc.ClientStream
}

type missionRawServerServiceSubscribeClearAllClient struct {
	grpc.ClientStream
}

func (x *missionRawServerServiceSubscribeClearAllClient) Recv() (*ClearAllResponse, error) {
	m := new(ClearAllResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MissionRawServerServiceServer is the server API for MissionRawServerService service.
// All implementations must embed UnimplementedMissionRawServerServiceServer
// for forward compatibility
type MissionRawServerServiceServer interface {
	// Subscribe to when a new mission is uploaded (asynchronous).
	SubscribeIncomingMission(*SubscribeIncomingMissionRequest, MissionRawServerService_SubscribeIncomingMissionServer) error
	// Subscribe to when a new current item is set
	SubscribeCurrentItemChanged(*SubscribeCurrentItemChangedRequest, MissionRawServerService_SubscribeCurrentItemChangedServer) error
	// Set Current item as completed
	SetCurrentItemComplete(context.Context, *SetCurrentItemCompleteRequest) (*SetCurrentItemCompleteResponse, error)
	// Subscribe when a MISSION_CLEAR_ALL is received
	SubscribeClearAll(*SubscribeClearAllRequest, MissionRawServerService_SubscribeClearAllServer) error
	mustEmbedUnimplementedMissionRawServerServiceServer()
}

// UnimplementedMissionRawServerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMissionRawServerServiceServer struct {
}

func (UnimplementedMissionRawServerServiceServer) SubscribeIncomingMission(*SubscribeIncomingMissionRequest, MissionRawServerService_SubscribeIncomingMissionServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeIncomingMission not implemented")
}
func (UnimplementedMissionRawServerServiceServer) SubscribeCurrentItemChanged(*SubscribeCurrentItemChangedRequest, MissionRawServerService_SubscribeCurrentItemChangedServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeCurrentItemChanged not implemented")
}
func (UnimplementedMissionRawServerServiceServer) SetCurrentItemComplete(context.Context, *SetCurrentItemCompleteRequest) (*SetCurrentItemCompleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCurrentItemComplete not implemented")
}
func (UnimplementedMissionRawServerServiceServer) SubscribeClearAll(*SubscribeClearAllRequest, MissionRawServerService_SubscribeClearAllServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeClearAll not implemented")
}
func (UnimplementedMissionRawServerServiceServer) mustEmbedUnimplementedMissionRawServerServiceServer() {
}

// UnsafeMissionRawServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MissionRawServerServiceServer will
// result in compilation errors.
type UnsafeMissionRawServerServiceServer interface {
	mustEmbedUnimplementedMissionRawServerServiceServer()
}

func RegisterMissionRawServerServiceServer(s grpc.ServiceRegistrar, srv MissionRawServerServiceServer) {
	s.RegisterService(&MissionRawServerService_ServiceDesc, srv)
}

func _MissionRawServerService_SubscribeIncomingMission_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeIncomingMissionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MissionRawServerServiceServer).SubscribeIncomingMission(m, &missionRawServerServiceSubscribeIncomingMissionServer{stream})
}

type MissionRawServerService_SubscribeIncomingMissionServer interface {
	Send(*IncomingMissionResponse) error
	grpc.ServerStream
}

type missionRawServerServiceSubscribeIncomingMissionServer struct {
	grpc.ServerStream
}

func (x *missionRawServerServiceSubscribeIncomingMissionServer) Send(m *IncomingMissionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MissionRawServerService_SubscribeCurrentItemChanged_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeCurrentItemChangedRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MissionRawServerServiceServer).SubscribeCurrentItemChanged(m, &missionRawServerServiceSubscribeCurrentItemChangedServer{stream})
}

type MissionRawServerService_SubscribeCurrentItemChangedServer interface {
	Send(*CurrentItemChangedResponse) error
	grpc.ServerStream
}

type missionRawServerServiceSubscribeCurrentItemChangedServer struct {
	grpc.ServerStream
}

func (x *missionRawServerServiceSubscribeCurrentItemChangedServer) Send(m *CurrentItemChangedResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MissionRawServerService_SetCurrentItemComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCurrentItemCompleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionRawServerServiceServer).SetCurrentItemComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.mission_raw_server.MissionRawServerService/SetCurrentItemComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionRawServerServiceServer).SetCurrentItemComplete(ctx, req.(*SetCurrentItemCompleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MissionRawServerService_SubscribeClearAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeClearAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MissionRawServerServiceServer).SubscribeClearAll(m, &missionRawServerServiceSubscribeClearAllServer{stream})
}

type MissionRawServerService_SubscribeClearAllServer interface {
	Send(*ClearAllResponse) error
	grpc.ServerStream
}

type missionRawServerServiceSubscribeClearAllServer struct {
	grpc.ServerStream
}

func (x *missionRawServerServiceSubscribeClearAllServer) Send(m *ClearAllResponse) error {
	return x.ServerStream.SendMsg(m)
}

// MissionRawServerService_ServiceDesc is the grpc.ServiceDesc for MissionRawServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MissionRawServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mavsdk.rpc.mission_raw_server.MissionRawServerService",
	HandlerType: (*MissionRawServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetCurrentItemComplete",
			Handler:    _MissionRawServerService_SetCurrentItemComplete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeIncomingMission",
			Handler:       _MissionRawServerService_SubscribeIncomingMission_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeCurrentItemChanged",
			Handler:       _MissionRawServerService_SubscribeCurrentItemChanged_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeClearAll",
			Handler:       _MissionRawServerService_SubscribeClearAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mission_raw_server.proto",
}
