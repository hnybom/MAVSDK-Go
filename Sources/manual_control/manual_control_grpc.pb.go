// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: manual_control.proto

package manual_control

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManualControlServiceClient is the client API for ManualControlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManualControlServiceClient interface {
	// Start position control using e.g. joystick input.
	//
	// Requires manual control input to be sent regularly already.
	// Requires a valid position using e.g. GPS, external vision, or optical flow.
	StartPositionControl(ctx context.Context, in *StartPositionControlRequest, opts ...grpc.CallOption) (*StartPositionControlResponse, error)
	// Start altitude control
	//
	// Requires manual control input to be sent regularly already.
	// Does not require a  valid position e.g. GPS.
	StartAltitudeControl(ctx context.Context, in *StartAltitudeControlRequest, opts ...grpc.CallOption) (*StartAltitudeControlResponse, error)
	// Set manual control input
	//
	// The manual control input needs to be sent at a rate high enough to prevent
	// triggering of RC loss, a good minimum rate is 10 Hz.
	SetManualControlInput(ctx context.Context, in *SetManualControlInputRequest, opts ...grpc.CallOption) (*SetManualControlInputResponse, error)
}

type manualControlServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewManualControlServiceClient(cc grpc.ClientConnInterface) ManualControlServiceClient {
	return &manualControlServiceClient{cc}
}

func (c *manualControlServiceClient) StartPositionControl(ctx context.Context, in *StartPositionControlRequest, opts ...grpc.CallOption) (*StartPositionControlResponse, error) {
	out := new(StartPositionControlResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.manual_control.ManualControlService/StartPositionControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manualControlServiceClient) StartAltitudeControl(ctx context.Context, in *StartAltitudeControlRequest, opts ...grpc.CallOption) (*StartAltitudeControlResponse, error) {
	out := new(StartAltitudeControlResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.manual_control.ManualControlService/StartAltitudeControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manualControlServiceClient) SetManualControlInput(ctx context.Context, in *SetManualControlInputRequest, opts ...grpc.CallOption) (*SetManualControlInputResponse, error) {
	out := new(SetManualControlInputResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.manual_control.ManualControlService/SetManualControlInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManualControlServiceServer is the server API for ManualControlService service.
// All implementations must embed UnimplementedManualControlServiceServer
// for forward compatibility
type ManualControlServiceServer interface {
	// Start position control using e.g. joystick input.
	//
	// Requires manual control input to be sent regularly already.
	// Requires a valid position using e.g. GPS, external vision, or optical flow.
	StartPositionControl(context.Context, *StartPositionControlRequest) (*StartPositionControlResponse, error)
	// Start altitude control
	//
	// Requires manual control input to be sent regularly already.
	// Does not require a  valid position e.g. GPS.
	StartAltitudeControl(context.Context, *StartAltitudeControlRequest) (*StartAltitudeControlResponse, error)
	// Set manual control input
	//
	// The manual control input needs to be sent at a rate high enough to prevent
	// triggering of RC loss, a good minimum rate is 10 Hz.
	SetManualControlInput(context.Context, *SetManualControlInputRequest) (*SetManualControlInputResponse, error)
	mustEmbedUnimplementedManualControlServiceServer()
}

// UnimplementedManualControlServiceServer must be embedded to have forward compatible implementations.
type UnimplementedManualControlServiceServer struct {
}

func (UnimplementedManualControlServiceServer) StartPositionControl(context.Context, *StartPositionControlRequest) (*StartPositionControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartPositionControl not implemented")
}
func (UnimplementedManualControlServiceServer) StartAltitudeControl(context.Context, *StartAltitudeControlRequest) (*StartAltitudeControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartAltitudeControl not implemented")
}
func (UnimplementedManualControlServiceServer) SetManualControlInput(context.Context, *SetManualControlInputRequest) (*SetManualControlInputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetManualControlInput not implemented")
}
func (UnimplementedManualControlServiceServer) mustEmbedUnimplementedManualControlServiceServer() {}

// UnsafeManualControlServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManualControlServiceServer will
// result in compilation errors.
type UnsafeManualControlServiceServer interface {
	mustEmbedUnimplementedManualControlServiceServer()
}

func RegisterManualControlServiceServer(s grpc.ServiceRegistrar, srv ManualControlServiceServer) {
	s.RegisterService(&ManualControlService_ServiceDesc, srv)
}

func _ManualControlService_StartPositionControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartPositionControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManualControlServiceServer).StartPositionControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.manual_control.ManualControlService/StartPositionControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManualControlServiceServer).StartPositionControl(ctx, req.(*StartPositionControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManualControlService_StartAltitudeControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartAltitudeControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManualControlServiceServer).StartAltitudeControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.manual_control.ManualControlService/StartAltitudeControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManualControlServiceServer).StartAltitudeControl(ctx, req.(*StartAltitudeControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManualControlService_SetManualControlInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetManualControlInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManualControlServiceServer).SetManualControlInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.manual_control.ManualControlService/SetManualControlInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManualControlServiceServer).SetManualControlInput(ctx, req.(*SetManualControlInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ManualControlService_ServiceDesc is the grpc.ServiceDesc for ManualControlService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManualControlService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mavsdk.rpc.manual_control.ManualControlService",
	HandlerType: (*ManualControlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartPositionControl",
			Handler:    _ManualControlService_StartPositionControl_Handler,
		},
		{
			MethodName: "StartAltitudeControl",
			Handler:    _ManualControlService_StartAltitudeControl_Handler,
		},
		{
			MethodName: "SetManualControlInput",
			Handler:    _ManualControlService_SetManualControlInput_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manual_control.proto",
}
