// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: camera.proto

package camera

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CameraServiceClient is the client API for CameraService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CameraServiceClient interface {
	// Prepare the camera plugin (e.g. download the camera definition, etc).
	Prepare(ctx context.Context, in *PrepareRequest, opts ...grpc.CallOption) (*PrepareResponse, error)
	// Take one photo.
	TakePhoto(ctx context.Context, in *TakePhotoRequest, opts ...grpc.CallOption) (*TakePhotoResponse, error)
	// Start photo timelapse with a given interval.
	StartPhotoInterval(ctx context.Context, in *StartPhotoIntervalRequest, opts ...grpc.CallOption) (*StartPhotoIntervalResponse, error)
	// Stop a running photo timelapse.
	StopPhotoInterval(ctx context.Context, in *StopPhotoIntervalRequest, opts ...grpc.CallOption) (*StopPhotoIntervalResponse, error)
	// Start a video recording.
	StartVideo(ctx context.Context, in *StartVideoRequest, opts ...grpc.CallOption) (*StartVideoResponse, error)
	// Stop a running video recording.
	StopVideo(ctx context.Context, in *StopVideoRequest, opts ...grpc.CallOption) (*StopVideoResponse, error)
	// Start video streaming.
	StartVideoStreaming(ctx context.Context, in *StartVideoStreamingRequest, opts ...grpc.CallOption) (*StartVideoStreamingResponse, error)
	// Stop current video streaming.
	StopVideoStreaming(ctx context.Context, in *StopVideoStreamingRequest, opts ...grpc.CallOption) (*StopVideoStreamingResponse, error)
	// Set camera mode.
	SetMode(ctx context.Context, in *SetModeRequest, opts ...grpc.CallOption) (*SetModeResponse, error)
	// List photos available on the camera.
	ListPhotos(ctx context.Context, in *ListPhotosRequest, opts ...grpc.CallOption) (*ListPhotosResponse, error)
	// Subscribe to camera mode updates.
	SubscribeMode(ctx context.Context, in *SubscribeModeRequest, opts ...grpc.CallOption) (CameraService_SubscribeModeClient, error)
	// Subscribe to camera information updates.
	SubscribeInformation(ctx context.Context, in *SubscribeInformationRequest, opts ...grpc.CallOption) (CameraService_SubscribeInformationClient, error)
	// Subscribe to video stream info updates.
	SubscribeVideoStreamInfo(ctx context.Context, in *SubscribeVideoStreamInfoRequest, opts ...grpc.CallOption) (CameraService_SubscribeVideoStreamInfoClient, error)
	// Subscribe to capture info updates.
	SubscribeCaptureInfo(ctx context.Context, in *SubscribeCaptureInfoRequest, opts ...grpc.CallOption) (CameraService_SubscribeCaptureInfoClient, error)
	// Subscribe to camera status updates.
	SubscribeStatus(ctx context.Context, in *SubscribeStatusRequest, opts ...grpc.CallOption) (CameraService_SubscribeStatusClient, error)
	// Get the list of current camera settings.
	SubscribeCurrentSettings(ctx context.Context, in *SubscribeCurrentSettingsRequest, opts ...grpc.CallOption) (CameraService_SubscribeCurrentSettingsClient, error)
	// Get the list of settings that can be changed.
	SubscribePossibleSettingOptions(ctx context.Context, in *SubscribePossibleSettingOptionsRequest, opts ...grpc.CallOption) (CameraService_SubscribePossibleSettingOptionsClient, error)
	// Set a setting to some value.
	//
	// Only setting_id of setting and option_id of option needs to be set.
	SetSetting(ctx context.Context, in *SetSettingRequest, opts ...grpc.CallOption) (*SetSettingResponse, error)
	// Get a setting.
	//
	// Only setting_id of setting needs to be set.
	GetSetting(ctx context.Context, in *GetSettingRequest, opts ...grpc.CallOption) (*GetSettingResponse, error)
	// Format storage (e.g. SD card) in camera.
	//
	// This will delete all content of the camera storage!
	FormatStorage(ctx context.Context, in *FormatStorageRequest, opts ...grpc.CallOption) (*FormatStorageResponse, error)
	// Select current camera .
	//
	// Bind the plugin instance to a specific camera_id
	SelectCamera(ctx context.Context, in *SelectCameraRequest, opts ...grpc.CallOption) (*SelectCameraResponse, error)
}

type cameraServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCameraServiceClient(cc grpc.ClientConnInterface) CameraServiceClient {
	return &cameraServiceClient{cc}
}

func (c *cameraServiceClient) Prepare(ctx context.Context, in *PrepareRequest, opts ...grpc.CallOption) (*PrepareResponse, error) {
	out := new(PrepareResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.camera.CameraService/Prepare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) TakePhoto(ctx context.Context, in *TakePhotoRequest, opts ...grpc.CallOption) (*TakePhotoResponse, error) {
	out := new(TakePhotoResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.camera.CameraService/TakePhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) StartPhotoInterval(ctx context.Context, in *StartPhotoIntervalRequest, opts ...grpc.CallOption) (*StartPhotoIntervalResponse, error) {
	out := new(StartPhotoIntervalResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.camera.CameraService/StartPhotoInterval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) StopPhotoInterval(ctx context.Context, in *StopPhotoIntervalRequest, opts ...grpc.CallOption) (*StopPhotoIntervalResponse, error) {
	out := new(StopPhotoIntervalResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.camera.CameraService/StopPhotoInterval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) StartVideo(ctx context.Context, in *StartVideoRequest, opts ...grpc.CallOption) (*StartVideoResponse, error) {
	out := new(StartVideoResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.camera.CameraService/StartVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) StopVideo(ctx context.Context, in *StopVideoRequest, opts ...grpc.CallOption) (*StopVideoResponse, error) {
	out := new(StopVideoResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.camera.CameraService/StopVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) StartVideoStreaming(ctx context.Context, in *StartVideoStreamingRequest, opts ...grpc.CallOption) (*StartVideoStreamingResponse, error) {
	out := new(StartVideoStreamingResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.camera.CameraService/StartVideoStreaming", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) StopVideoStreaming(ctx context.Context, in *StopVideoStreamingRequest, opts ...grpc.CallOption) (*StopVideoStreamingResponse, error) {
	out := new(StopVideoStreamingResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.camera.CameraService/StopVideoStreaming", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) SetMode(ctx context.Context, in *SetModeRequest, opts ...grpc.CallOption) (*SetModeResponse, error) {
	out := new(SetModeResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.camera.CameraService/SetMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) ListPhotos(ctx context.Context, in *ListPhotosRequest, opts ...grpc.CallOption) (*ListPhotosResponse, error) {
	out := new(ListPhotosResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.camera.CameraService/ListPhotos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) SubscribeMode(ctx context.Context, in *SubscribeModeRequest, opts ...grpc.CallOption) (CameraService_SubscribeModeClient, error) {
	stream, err := c.cc.NewStream(ctx, &CameraService_ServiceDesc.Streams[0], "/mavsdk.rpc.camera.CameraService/SubscribeMode", opts...)
	if err != nil {
		return nil, err
	}
	x := &cameraServiceSubscribeModeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CameraService_SubscribeModeClient interface {
	Recv() (*ModeResponse, error)
	grpc.ClientStream
}

type cameraServiceSubscribeModeClient struct {
	grpc.ClientStream
}

func (x *cameraServiceSubscribeModeClient) Recv() (*ModeResponse, error) {
	m := new(ModeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cameraServiceClient) SubscribeInformation(ctx context.Context, in *SubscribeInformationRequest, opts ...grpc.CallOption) (CameraService_SubscribeInformationClient, error) {
	stream, err := c.cc.NewStream(ctx, &CameraService_ServiceDesc.Streams[1], "/mavsdk.rpc.camera.CameraService/SubscribeInformation", opts...)
	if err != nil {
		return nil, err
	}
	x := &cameraServiceSubscribeInformationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CameraService_SubscribeInformationClient interface {
	Recv() (*InformationResponse, error)
	grpc.ClientStream
}

type cameraServiceSubscribeInformationClient struct {
	grpc.ClientStream
}

func (x *cameraServiceSubscribeInformationClient) Recv() (*InformationResponse, error) {
	m := new(InformationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cameraServiceClient) SubscribeVideoStreamInfo(ctx context.Context, in *SubscribeVideoStreamInfoRequest, opts ...grpc.CallOption) (CameraService_SubscribeVideoStreamInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &CameraService_ServiceDesc.Streams[2], "/mavsdk.rpc.camera.CameraService/SubscribeVideoStreamInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &cameraServiceSubscribeVideoStreamInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CameraService_SubscribeVideoStreamInfoClient interface {
	Recv() (*VideoStreamInfoResponse, error)
	grpc.ClientStream
}

type cameraServiceSubscribeVideoStreamInfoClient struct {
	grpc.ClientStream
}

func (x *cameraServiceSubscribeVideoStreamInfoClient) Recv() (*VideoStreamInfoResponse, error) {
	m := new(VideoStreamInfoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cameraServiceClient) SubscribeCaptureInfo(ctx context.Context, in *SubscribeCaptureInfoRequest, opts ...grpc.CallOption) (CameraService_SubscribeCaptureInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &CameraService_ServiceDesc.Streams[3], "/mavsdk.rpc.camera.CameraService/SubscribeCaptureInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &cameraServiceSubscribeCaptureInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CameraService_SubscribeCaptureInfoClient interface {
	Recv() (*CaptureInfoResponse, error)
	grpc.ClientStream
}

type cameraServiceSubscribeCaptureInfoClient struct {
	grpc.ClientStream
}

func (x *cameraServiceSubscribeCaptureInfoClient) Recv() (*CaptureInfoResponse, error) {
	m := new(CaptureInfoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cameraServiceClient) SubscribeStatus(ctx context.Context, in *SubscribeStatusRequest, opts ...grpc.CallOption) (CameraService_SubscribeStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &CameraService_ServiceDesc.Streams[4], "/mavsdk.rpc.camera.CameraService/SubscribeStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &cameraServiceSubscribeStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CameraService_SubscribeStatusClient interface {
	Recv() (*StatusResponse, error)
	grpc.ClientStream
}

type cameraServiceSubscribeStatusClient struct {
	grpc.ClientStream
}

func (x *cameraServiceSubscribeStatusClient) Recv() (*StatusResponse, error) {
	m := new(StatusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cameraServiceClient) SubscribeCurrentSettings(ctx context.Context, in *SubscribeCurrentSettingsRequest, opts ...grpc.CallOption) (CameraService_SubscribeCurrentSettingsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CameraService_ServiceDesc.Streams[5], "/mavsdk.rpc.camera.CameraService/SubscribeCurrentSettings", opts...)
	if err != nil {
		return nil, err
	}
	x := &cameraServiceSubscribeCurrentSettingsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CameraService_SubscribeCurrentSettingsClient interface {
	Recv() (*CurrentSettingsResponse, error)
	grpc.ClientStream
}

type cameraServiceSubscribeCurrentSettingsClient struct {
	grpc.ClientStream
}

func (x *cameraServiceSubscribeCurrentSettingsClient) Recv() (*CurrentSettingsResponse, error) {
	m := new(CurrentSettingsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cameraServiceClient) SubscribePossibleSettingOptions(ctx context.Context, in *SubscribePossibleSettingOptionsRequest, opts ...grpc.CallOption) (CameraService_SubscribePossibleSettingOptionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CameraService_ServiceDesc.Streams[6], "/mavsdk.rpc.camera.CameraService/SubscribePossibleSettingOptions", opts...)
	if err != nil {
		return nil, err
	}
	x := &cameraServiceSubscribePossibleSettingOptionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CameraService_SubscribePossibleSettingOptionsClient interface {
	Recv() (*PossibleSettingOptionsResponse, error)
	grpc.ClientStream
}

type cameraServiceSubscribePossibleSettingOptionsClient struct {
	grpc.ClientStream
}

func (x *cameraServiceSubscribePossibleSettingOptionsClient) Recv() (*PossibleSettingOptionsResponse, error) {
	m := new(PossibleSettingOptionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cameraServiceClient) SetSetting(ctx context.Context, in *SetSettingRequest, opts ...grpc.CallOption) (*SetSettingResponse, error) {
	out := new(SetSettingResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.camera.CameraService/SetSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) GetSetting(ctx context.Context, in *GetSettingRequest, opts ...grpc.CallOption) (*GetSettingResponse, error) {
	out := new(GetSettingResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.camera.CameraService/GetSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) FormatStorage(ctx context.Context, in *FormatStorageRequest, opts ...grpc.CallOption) (*FormatStorageResponse, error) {
	out := new(FormatStorageResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.camera.CameraService/FormatStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) SelectCamera(ctx context.Context, in *SelectCameraRequest, opts ...grpc.CallOption) (*SelectCameraResponse, error) {
	out := new(SelectCameraResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.camera.CameraService/SelectCamera", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CameraServiceServer is the server API for CameraService service.
// All implementations must embed UnimplementedCameraServiceServer
// for forward compatibility
type CameraServiceServer interface {
	// Prepare the camera plugin (e.g. download the camera definition, etc).
	Prepare(context.Context, *PrepareRequest) (*PrepareResponse, error)
	// Take one photo.
	TakePhoto(context.Context, *TakePhotoRequest) (*TakePhotoResponse, error)
	// Start photo timelapse with a given interval.
	StartPhotoInterval(context.Context, *StartPhotoIntervalRequest) (*StartPhotoIntervalResponse, error)
	// Stop a running photo timelapse.
	StopPhotoInterval(context.Context, *StopPhotoIntervalRequest) (*StopPhotoIntervalResponse, error)
	// Start a video recording.
	StartVideo(context.Context, *StartVideoRequest) (*StartVideoResponse, error)
	// Stop a running video recording.
	StopVideo(context.Context, *StopVideoRequest) (*StopVideoResponse, error)
	// Start video streaming.
	StartVideoStreaming(context.Context, *StartVideoStreamingRequest) (*StartVideoStreamingResponse, error)
	// Stop current video streaming.
	StopVideoStreaming(context.Context, *StopVideoStreamingRequest) (*StopVideoStreamingResponse, error)
	// Set camera mode.
	SetMode(context.Context, *SetModeRequest) (*SetModeResponse, error)
	// List photos available on the camera.
	ListPhotos(context.Context, *ListPhotosRequest) (*ListPhotosResponse, error)
	// Subscribe to camera mode updates.
	SubscribeMode(*SubscribeModeRequest, CameraService_SubscribeModeServer) error
	// Subscribe to camera information updates.
	SubscribeInformation(*SubscribeInformationRequest, CameraService_SubscribeInformationServer) error
	// Subscribe to video stream info updates.
	SubscribeVideoStreamInfo(*SubscribeVideoStreamInfoRequest, CameraService_SubscribeVideoStreamInfoServer) error
	// Subscribe to capture info updates.
	SubscribeCaptureInfo(*SubscribeCaptureInfoRequest, CameraService_SubscribeCaptureInfoServer) error
	// Subscribe to camera status updates.
	SubscribeStatus(*SubscribeStatusRequest, CameraService_SubscribeStatusServer) error
	// Get the list of current camera settings.
	SubscribeCurrentSettings(*SubscribeCurrentSettingsRequest, CameraService_SubscribeCurrentSettingsServer) error
	// Get the list of settings that can be changed.
	SubscribePossibleSettingOptions(*SubscribePossibleSettingOptionsRequest, CameraService_SubscribePossibleSettingOptionsServer) error
	// Set a setting to some value.
	//
	// Only setting_id of setting and option_id of option needs to be set.
	SetSetting(context.Context, *SetSettingRequest) (*SetSettingResponse, error)
	// Get a setting.
	//
	// Only setting_id of setting needs to be set.
	GetSetting(context.Context, *GetSettingRequest) (*GetSettingResponse, error)
	// Format storage (e.g. SD card) in camera.
	//
	// This will delete all content of the camera storage!
	FormatStorage(context.Context, *FormatStorageRequest) (*FormatStorageResponse, error)
	// Select current camera .
	//
	// Bind the plugin instance to a specific camera_id
	SelectCamera(context.Context, *SelectCameraRequest) (*SelectCameraResponse, error)
	mustEmbedUnimplementedCameraServiceServer()
}

// UnimplementedCameraServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCameraServiceServer struct {
}

func (UnimplementedCameraServiceServer) Prepare(context.Context, *PrepareRequest) (*PrepareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prepare not implemented")
}
func (UnimplementedCameraServiceServer) TakePhoto(context.Context, *TakePhotoRequest) (*TakePhotoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TakePhoto not implemented")
}
func (UnimplementedCameraServiceServer) StartPhotoInterval(context.Context, *StartPhotoIntervalRequest) (*StartPhotoIntervalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartPhotoInterval not implemented")
}
func (UnimplementedCameraServiceServer) StopPhotoInterval(context.Context, *StopPhotoIntervalRequest) (*StopPhotoIntervalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopPhotoInterval not implemented")
}
func (UnimplementedCameraServiceServer) StartVideo(context.Context, *StartVideoRequest) (*StartVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartVideo not implemented")
}
func (UnimplementedCameraServiceServer) StopVideo(context.Context, *StopVideoRequest) (*StopVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopVideo not implemented")
}
func (UnimplementedCameraServiceServer) StartVideoStreaming(context.Context, *StartVideoStreamingRequest) (*StartVideoStreamingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartVideoStreaming not implemented")
}
func (UnimplementedCameraServiceServer) StopVideoStreaming(context.Context, *StopVideoStreamingRequest) (*StopVideoStreamingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopVideoStreaming not implemented")
}
func (UnimplementedCameraServiceServer) SetMode(context.Context, *SetModeRequest) (*SetModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMode not implemented")
}
func (UnimplementedCameraServiceServer) ListPhotos(context.Context, *ListPhotosRequest) (*ListPhotosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPhotos not implemented")
}
func (UnimplementedCameraServiceServer) SubscribeMode(*SubscribeModeRequest, CameraService_SubscribeModeServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMode not implemented")
}
func (UnimplementedCameraServiceServer) SubscribeInformation(*SubscribeInformationRequest, CameraService_SubscribeInformationServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeInformation not implemented")
}
func (UnimplementedCameraServiceServer) SubscribeVideoStreamInfo(*SubscribeVideoStreamInfoRequest, CameraService_SubscribeVideoStreamInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeVideoStreamInfo not implemented")
}
func (UnimplementedCameraServiceServer) SubscribeCaptureInfo(*SubscribeCaptureInfoRequest, CameraService_SubscribeCaptureInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeCaptureInfo not implemented")
}
func (UnimplementedCameraServiceServer) SubscribeStatus(*SubscribeStatusRequest, CameraService_SubscribeStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeStatus not implemented")
}
func (UnimplementedCameraServiceServer) SubscribeCurrentSettings(*SubscribeCurrentSettingsRequest, CameraService_SubscribeCurrentSettingsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeCurrentSettings not implemented")
}
func (UnimplementedCameraServiceServer) SubscribePossibleSettingOptions(*SubscribePossibleSettingOptionsRequest, CameraService_SubscribePossibleSettingOptionsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribePossibleSettingOptions not implemented")
}
func (UnimplementedCameraServiceServer) SetSetting(context.Context, *SetSettingRequest) (*SetSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSetting not implemented")
}
func (UnimplementedCameraServiceServer) GetSetting(context.Context, *GetSettingRequest) (*GetSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSetting not implemented")
}
func (UnimplementedCameraServiceServer) FormatStorage(context.Context, *FormatStorageRequest) (*FormatStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FormatStorage not implemented")
}
func (UnimplementedCameraServiceServer) SelectCamera(context.Context, *SelectCameraRequest) (*SelectCameraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectCamera not implemented")
}
func (UnimplementedCameraServiceServer) mustEmbedUnimplementedCameraServiceServer() {}

// UnsafeCameraServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CameraServiceServer will
// result in compilation errors.
type UnsafeCameraServiceServer interface {
	mustEmbedUnimplementedCameraServiceServer()
}

func RegisterCameraServiceServer(s grpc.ServiceRegistrar, srv CameraServiceServer) {
	s.RegisterService(&CameraService_ServiceDesc, srv)
}

func _CameraService_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.camera.CameraService/Prepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).Prepare(ctx, req.(*PrepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_TakePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TakePhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).TakePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.camera.CameraService/TakePhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).TakePhoto(ctx, req.(*TakePhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_StartPhotoInterval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartPhotoIntervalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).StartPhotoInterval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.camera.CameraService/StartPhotoInterval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).StartPhotoInterval(ctx, req.(*StartPhotoIntervalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_StopPhotoInterval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopPhotoIntervalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).StopPhotoInterval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.camera.CameraService/StopPhotoInterval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).StopPhotoInterval(ctx, req.(*StopPhotoIntervalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_StartVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).StartVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.camera.CameraService/StartVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).StartVideo(ctx, req.(*StartVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_StopVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).StopVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.camera.CameraService/StopVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).StopVideo(ctx, req.(*StopVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_StartVideoStreaming_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartVideoStreamingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).StartVideoStreaming(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.camera.CameraService/StartVideoStreaming",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).StartVideoStreaming(ctx, req.(*StartVideoStreamingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_StopVideoStreaming_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopVideoStreamingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).StopVideoStreaming(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.camera.CameraService/StopVideoStreaming",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).StopVideoStreaming(ctx, req.(*StopVideoStreamingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_SetMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).SetMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.camera.CameraService/SetMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).SetMode(ctx, req.(*SetModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_ListPhotos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPhotosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).ListPhotos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.camera.CameraService/ListPhotos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).ListPhotos(ctx, req.(*ListPhotosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_SubscribeMode_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeModeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CameraServiceServer).SubscribeMode(m, &cameraServiceSubscribeModeServer{stream})
}

type CameraService_SubscribeModeServer interface {
	Send(*ModeResponse) error
	grpc.ServerStream
}

type cameraServiceSubscribeModeServer struct {
	grpc.ServerStream
}

func (x *cameraServiceSubscribeModeServer) Send(m *ModeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CameraService_SubscribeInformation_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeInformationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CameraServiceServer).SubscribeInformation(m, &cameraServiceSubscribeInformationServer{stream})
}

type CameraService_SubscribeInformationServer interface {
	Send(*InformationResponse) error
	grpc.ServerStream
}

type cameraServiceSubscribeInformationServer struct {
	grpc.ServerStream
}

func (x *cameraServiceSubscribeInformationServer) Send(m *InformationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CameraService_SubscribeVideoStreamInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeVideoStreamInfoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CameraServiceServer).SubscribeVideoStreamInfo(m, &cameraServiceSubscribeVideoStreamInfoServer{stream})
}

type CameraService_SubscribeVideoStreamInfoServer interface {
	Send(*VideoStreamInfoResponse) error
	grpc.ServerStream
}

type cameraServiceSubscribeVideoStreamInfoServer struct {
	grpc.ServerStream
}

func (x *cameraServiceSubscribeVideoStreamInfoServer) Send(m *VideoStreamInfoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CameraService_SubscribeCaptureInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeCaptureInfoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CameraServiceServer).SubscribeCaptureInfo(m, &cameraServiceSubscribeCaptureInfoServer{stream})
}

type CameraService_SubscribeCaptureInfoServer interface {
	Send(*CaptureInfoResponse) error
	grpc.ServerStream
}

type cameraServiceSubscribeCaptureInfoServer struct {
	grpc.ServerStream
}

func (x *cameraServiceSubscribeCaptureInfoServer) Send(m *CaptureInfoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CameraService_SubscribeStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CameraServiceServer).SubscribeStatus(m, &cameraServiceSubscribeStatusServer{stream})
}

type CameraService_SubscribeStatusServer interface {
	Send(*StatusResponse) error
	grpc.ServerStream
}

type cameraServiceSubscribeStatusServer struct {
	grpc.ServerStream
}

func (x *cameraServiceSubscribeStatusServer) Send(m *StatusResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CameraService_SubscribeCurrentSettings_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeCurrentSettingsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CameraServiceServer).SubscribeCurrentSettings(m, &cameraServiceSubscribeCurrentSettingsServer{stream})
}

type CameraService_SubscribeCurrentSettingsServer interface {
	Send(*CurrentSettingsResponse) error
	grpc.ServerStream
}

type cameraServiceSubscribeCurrentSettingsServer struct {
	grpc.ServerStream
}

func (x *cameraServiceSubscribeCurrentSettingsServer) Send(m *CurrentSettingsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CameraService_SubscribePossibleSettingOptions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribePossibleSettingOptionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CameraServiceServer).SubscribePossibleSettingOptions(m, &cameraServiceSubscribePossibleSettingOptionsServer{stream})
}

type CameraService_SubscribePossibleSettingOptionsServer interface {
	Send(*PossibleSettingOptionsResponse) error
	grpc.ServerStream
}

type cameraServiceSubscribePossibleSettingOptionsServer struct {
	grpc.ServerStream
}

func (x *cameraServiceSubscribePossibleSettingOptionsServer) Send(m *PossibleSettingOptionsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CameraService_SetSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).SetSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.camera.CameraService/SetSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).SetSetting(ctx, req.(*SetSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_GetSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).GetSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.camera.CameraService/GetSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).GetSetting(ctx, req.(*GetSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_FormatStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FormatStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).FormatStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.camera.CameraService/FormatStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).FormatStorage(ctx, req.(*FormatStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_SelectCamera_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectCameraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).SelectCamera(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.camera.CameraService/SelectCamera",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).SelectCamera(ctx, req.(*SelectCameraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CameraService_ServiceDesc is the grpc.ServiceDesc for CameraService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CameraService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mavsdk.rpc.camera.CameraService",
	HandlerType: (*CameraServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prepare",
			Handler:    _CameraService_Prepare_Handler,
		},
		{
			MethodName: "TakePhoto",
			Handler:    _CameraService_TakePhoto_Handler,
		},
		{
			MethodName: "StartPhotoInterval",
			Handler:    _CameraService_StartPhotoInterval_Handler,
		},
		{
			MethodName: "StopPhotoInterval",
			Handler:    _CameraService_StopPhotoInterval_Handler,
		},
		{
			MethodName: "StartVideo",
			Handler:    _CameraService_StartVideo_Handler,
		},
		{
			MethodName: "StopVideo",
			Handler:    _CameraService_StopVideo_Handler,
		},
		{
			MethodName: "StartVideoStreaming",
			Handler:    _CameraService_StartVideoStreaming_Handler,
		},
		{
			MethodName: "StopVideoStreaming",
			Handler:    _CameraService_StopVideoStreaming_Handler,
		},
		{
			MethodName: "SetMode",
			Handler:    _CameraService_SetMode_Handler,
		},
		{
			MethodName: "ListPhotos",
			Handler:    _CameraService_ListPhotos_Handler,
		},
		{
			MethodName: "SetSetting",
			Handler:    _CameraService_SetSetting_Handler,
		},
		{
			MethodName: "GetSetting",
			Handler:    _CameraService_GetSetting_Handler,
		},
		{
			MethodName: "FormatStorage",
			Handler:    _CameraService_FormatStorage_Handler,
		},
		{
			MethodName: "SelectCamera",
			Handler:    _CameraService_SelectCamera_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeMode",
			Handler:       _CameraService_SubscribeMode_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeInformation",
			Handler:       _CameraService_SubscribeInformation_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeVideoStreamInfo",
			Handler:       _CameraService_SubscribeVideoStreamInfo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeCaptureInfo",
			Handler:       _CameraService_SubscribeCaptureInfo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeStatus",
			Handler:       _CameraService_SubscribeStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeCurrentSettings",
			Handler:       _CameraService_SubscribeCurrentSettings_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribePossibleSettingOptions",
			Handler:       _CameraService_SubscribePossibleSettingOptions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "camera.proto",
}
