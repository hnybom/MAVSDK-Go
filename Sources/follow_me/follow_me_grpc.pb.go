// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: follow_me.proto

package follow_me

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FollowMeServiceClient is the client API for FollowMeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FollowMeServiceClient interface {
	// Get current configuration.
	GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error)
	// Apply configuration by sending it to the system.
	SetConfig(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (*SetConfigResponse, error)
	// Check if FollowMe is active.
	IsActive(ctx context.Context, in *IsActiveRequest, opts ...grpc.CallOption) (*IsActiveResponse, error)
	// Set location of the moving target.
	SetTargetLocation(ctx context.Context, in *SetTargetLocationRequest, opts ...grpc.CallOption) (*SetTargetLocationResponse, error)
	// Get the last location of the target.
	GetLastLocation(ctx context.Context, in *GetLastLocationRequest, opts ...grpc.CallOption) (*GetLastLocationResponse, error)
	// Start FollowMe mode.
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	// Stop FollowMe mode.
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
}

type followMeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFollowMeServiceClient(cc grpc.ClientConnInterface) FollowMeServiceClient {
	return &followMeServiceClient{cc}
}

func (c *followMeServiceClient) GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error) {
	out := new(GetConfigResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.follow_me.FollowMeService/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followMeServiceClient) SetConfig(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (*SetConfigResponse, error) {
	out := new(SetConfigResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.follow_me.FollowMeService/SetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followMeServiceClient) IsActive(ctx context.Context, in *IsActiveRequest, opts ...grpc.CallOption) (*IsActiveResponse, error) {
	out := new(IsActiveResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.follow_me.FollowMeService/IsActive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followMeServiceClient) SetTargetLocation(ctx context.Context, in *SetTargetLocationRequest, opts ...grpc.CallOption) (*SetTargetLocationResponse, error) {
	out := new(SetTargetLocationResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.follow_me.FollowMeService/SetTargetLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followMeServiceClient) GetLastLocation(ctx context.Context, in *GetLastLocationRequest, opts ...grpc.CallOption) (*GetLastLocationResponse, error) {
	out := new(GetLastLocationResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.follow_me.FollowMeService/GetLastLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followMeServiceClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.follow_me.FollowMeService/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followMeServiceClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.follow_me.FollowMeService/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FollowMeServiceServer is the server API for FollowMeService service.
// All implementations must embed UnimplementedFollowMeServiceServer
// for forward compatibility
type FollowMeServiceServer interface {
	// Get current configuration.
	GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error)
	// Apply configuration by sending it to the system.
	SetConfig(context.Context, *SetConfigRequest) (*SetConfigResponse, error)
	// Check if FollowMe is active.
	IsActive(context.Context, *IsActiveRequest) (*IsActiveResponse, error)
	// Set location of the moving target.
	SetTargetLocation(context.Context, *SetTargetLocationRequest) (*SetTargetLocationResponse, error)
	// Get the last location of the target.
	GetLastLocation(context.Context, *GetLastLocationRequest) (*GetLastLocationResponse, error)
	// Start FollowMe mode.
	Start(context.Context, *StartRequest) (*StartResponse, error)
	// Stop FollowMe mode.
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	mustEmbedUnimplementedFollowMeServiceServer()
}

// UnimplementedFollowMeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFollowMeServiceServer struct {
}

func (UnimplementedFollowMeServiceServer) GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedFollowMeServiceServer) SetConfig(context.Context, *SetConfigRequest) (*SetConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfig not implemented")
}
func (UnimplementedFollowMeServiceServer) IsActive(context.Context, *IsActiveRequest) (*IsActiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsActive not implemented")
}
func (UnimplementedFollowMeServiceServer) SetTargetLocation(context.Context, *SetTargetLocationRequest) (*SetTargetLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTargetLocation not implemented")
}
func (UnimplementedFollowMeServiceServer) GetLastLocation(context.Context, *GetLastLocationRequest) (*GetLastLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastLocation not implemented")
}
func (UnimplementedFollowMeServiceServer) Start(context.Context, *StartRequest) (*StartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedFollowMeServiceServer) Stop(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedFollowMeServiceServer) mustEmbedUnimplementedFollowMeServiceServer() {}

// UnsafeFollowMeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FollowMeServiceServer will
// result in compilation errors.
type UnsafeFollowMeServiceServer interface {
	mustEmbedUnimplementedFollowMeServiceServer()
}

func RegisterFollowMeServiceServer(s grpc.ServiceRegistrar, srv FollowMeServiceServer) {
	s.RegisterService(&FollowMeService_ServiceDesc, srv)
}

func _FollowMeService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowMeServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.follow_me.FollowMeService/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowMeServiceServer).GetConfig(ctx, req.(*GetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowMeService_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowMeServiceServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.follow_me.FollowMeService/SetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowMeServiceServer).SetConfig(ctx, req.(*SetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowMeService_IsActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsActiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowMeServiceServer).IsActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.follow_me.FollowMeService/IsActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowMeServiceServer).IsActive(ctx, req.(*IsActiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowMeService_SetTargetLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTargetLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowMeServiceServer).SetTargetLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.follow_me.FollowMeService/SetTargetLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowMeServiceServer).SetTargetLocation(ctx, req.(*SetTargetLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowMeService_GetLastLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowMeServiceServer).GetLastLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.follow_me.FollowMeService/GetLastLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowMeServiceServer).GetLastLocation(ctx, req.(*GetLastLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowMeService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowMeServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.follow_me.FollowMeService/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowMeServiceServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowMeService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowMeServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.follow_me.FollowMeService/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowMeServiceServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FollowMeService_ServiceDesc is the grpc.ServiceDesc for FollowMeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FollowMeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mavsdk.rpc.follow_me.FollowMeService",
	HandlerType: (*FollowMeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfig",
			Handler:    _FollowMeService_GetConfig_Handler,
		},
		{
			MethodName: "SetConfig",
			Handler:    _FollowMeService_SetConfig_Handler,
		},
		{
			MethodName: "IsActive",
			Handler:    _FollowMeService_IsActive_Handler,
		},
		{
			MethodName: "SetTargetLocation",
			Handler:    _FollowMeService_SetTargetLocation_Handler,
		},
		{
			MethodName: "GetLastLocation",
			Handler:    _FollowMeService_GetLastLocation_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _FollowMeService_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _FollowMeService_Stop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "follow_me.proto",
}
