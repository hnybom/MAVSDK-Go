// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: action_server.proto

package action_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ActionServerServiceClient is the client API for ActionServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActionServerServiceClient interface {
	// Subscribe to ARM/DISARM commands
	SubscribeArmDisarm(ctx context.Context, in *SubscribeArmDisarmRequest, opts ...grpc.CallOption) (ActionServerService_SubscribeArmDisarmClient, error)
	// Subscribe to DO_SET_MODE
	SubscribeFlightModeChange(ctx context.Context, in *SubscribeFlightModeChangeRequest, opts ...grpc.CallOption) (ActionServerService_SubscribeFlightModeChangeClient, error)
	// Subscribe to takeoff command
	SubscribeTakeoff(ctx context.Context, in *SubscribeTakeoffRequest, opts ...grpc.CallOption) (ActionServerService_SubscribeTakeoffClient, error)
	// Subscribe to land command
	SubscribeLand(ctx context.Context, in *SubscribeLandRequest, opts ...grpc.CallOption) (ActionServerService_SubscribeLandClient, error)
	// Subscribe to reboot command
	SubscribeReboot(ctx context.Context, in *SubscribeRebootRequest, opts ...grpc.CallOption) (ActionServerService_SubscribeRebootClient, error)
	// Subscribe to shutdown command
	SubscribeShutdown(ctx context.Context, in *SubscribeShutdownRequest, opts ...grpc.CallOption) (ActionServerService_SubscribeShutdownClient, error)
	// Subscribe to terminate command
	SubscribeTerminate(ctx context.Context, in *SubscribeTerminateRequest, opts ...grpc.CallOption) (ActionServerService_SubscribeTerminateClient, error)
	// Can the vehicle takeoff
	SetAllowTakeoff(ctx context.Context, in *SetAllowTakeoffRequest, opts ...grpc.CallOption) (*SetAllowTakeoffResponse, error)
	// Can the vehicle arm when requested
	SetArmable(ctx context.Context, in *SetArmableRequest, opts ...grpc.CallOption) (*SetArmableResponse, error)
	// Can the vehicle disarm when requested
	SetDisarmable(ctx context.Context, in *SetDisarmableRequest, opts ...grpc.CallOption) (*SetDisarmableResponse, error)
	// Set which modes the vehicle can transition to (Manual always allowed)
	SetAllowableFlightModes(ctx context.Context, in *SetAllowableFlightModesRequest, opts ...grpc.CallOption) (*SetAllowableFlightModesResponse, error)
	// Get which modes the vehicle can transition to (Manual always allowed)
	GetAllowableFlightModes(ctx context.Context, in *GetAllowableFlightModesRequest, opts ...grpc.CallOption) (*GetAllowableFlightModesResponse, error)
}

type actionServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewActionServerServiceClient(cc grpc.ClientConnInterface) ActionServerServiceClient {
	return &actionServerServiceClient{cc}
}

func (c *actionServerServiceClient) SubscribeArmDisarm(ctx context.Context, in *SubscribeArmDisarmRequest, opts ...grpc.CallOption) (ActionServerService_SubscribeArmDisarmClient, error) {
	stream, err := c.cc.NewStream(ctx, &ActionServerService_ServiceDesc.Streams[0], "/mavsdk.rpc.action_server.ActionServerService/SubscribeArmDisarm", opts...)
	if err != nil {
		return nil, err
	}
	x := &actionServerServiceSubscribeArmDisarmClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ActionServerService_SubscribeArmDisarmClient interface {
	Recv() (*ArmDisarmResponse, error)
	grpc.ClientStream
}

type actionServerServiceSubscribeArmDisarmClient struct {
	grpc.ClientStream
}

func (x *actionServerServiceSubscribeArmDisarmClient) Recv() (*ArmDisarmResponse, error) {
	m := new(ArmDisarmResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *actionServerServiceClient) SubscribeFlightModeChange(ctx context.Context, in *SubscribeFlightModeChangeRequest, opts ...grpc.CallOption) (ActionServerService_SubscribeFlightModeChangeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ActionServerService_ServiceDesc.Streams[1], "/mavsdk.rpc.action_server.ActionServerService/SubscribeFlightModeChange", opts...)
	if err != nil {
		return nil, err
	}
	x := &actionServerServiceSubscribeFlightModeChangeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ActionServerService_SubscribeFlightModeChangeClient interface {
	Recv() (*FlightModeChangeResponse, error)
	grpc.ClientStream
}

type actionServerServiceSubscribeFlightModeChangeClient struct {
	grpc.ClientStream
}

func (x *actionServerServiceSubscribeFlightModeChangeClient) Recv() (*FlightModeChangeResponse, error) {
	m := new(FlightModeChangeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *actionServerServiceClient) SubscribeTakeoff(ctx context.Context, in *SubscribeTakeoffRequest, opts ...grpc.CallOption) (ActionServerService_SubscribeTakeoffClient, error) {
	stream, err := c.cc.NewStream(ctx, &ActionServerService_ServiceDesc.Streams[2], "/mavsdk.rpc.action_server.ActionServerService/SubscribeTakeoff", opts...)
	if err != nil {
		return nil, err
	}
	x := &actionServerServiceSubscribeTakeoffClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ActionServerService_SubscribeTakeoffClient interface {
	Recv() (*TakeoffResponse, error)
	grpc.ClientStream
}

type actionServerServiceSubscribeTakeoffClient struct {
	grpc.ClientStream
}

func (x *actionServerServiceSubscribeTakeoffClient) Recv() (*TakeoffResponse, error) {
	m := new(TakeoffResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *actionServerServiceClient) SubscribeLand(ctx context.Context, in *SubscribeLandRequest, opts ...grpc.CallOption) (ActionServerService_SubscribeLandClient, error) {
	stream, err := c.cc.NewStream(ctx, &ActionServerService_ServiceDesc.Streams[3], "/mavsdk.rpc.action_server.ActionServerService/SubscribeLand", opts...)
	if err != nil {
		return nil, err
	}
	x := &actionServerServiceSubscribeLandClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ActionServerService_SubscribeLandClient interface {
	Recv() (*LandResponse, error)
	grpc.ClientStream
}

type actionServerServiceSubscribeLandClient struct {
	grpc.ClientStream
}

func (x *actionServerServiceSubscribeLandClient) Recv() (*LandResponse, error) {
	m := new(LandResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *actionServerServiceClient) SubscribeReboot(ctx context.Context, in *SubscribeRebootRequest, opts ...grpc.CallOption) (ActionServerService_SubscribeRebootClient, error) {
	stream, err := c.cc.NewStream(ctx, &ActionServerService_ServiceDesc.Streams[4], "/mavsdk.rpc.action_server.ActionServerService/SubscribeReboot", opts...)
	if err != nil {
		return nil, err
	}
	x := &actionServerServiceSubscribeRebootClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ActionServerService_SubscribeRebootClient interface {
	Recv() (*RebootResponse, error)
	grpc.ClientStream
}

type actionServerServiceSubscribeRebootClient struct {
	grpc.ClientStream
}

func (x *actionServerServiceSubscribeRebootClient) Recv() (*RebootResponse, error) {
	m := new(RebootResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *actionServerServiceClient) SubscribeShutdown(ctx context.Context, in *SubscribeShutdownRequest, opts ...grpc.CallOption) (ActionServerService_SubscribeShutdownClient, error) {
	stream, err := c.cc.NewStream(ctx, &ActionServerService_ServiceDesc.Streams[5], "/mavsdk.rpc.action_server.ActionServerService/SubscribeShutdown", opts...)
	if err != nil {
		return nil, err
	}
	x := &actionServerServiceSubscribeShutdownClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ActionServerService_SubscribeShutdownClient interface {
	Recv() (*ShutdownResponse, error)
	grpc.ClientStream
}

type actionServerServiceSubscribeShutdownClient struct {
	grpc.ClientStream
}

func (x *actionServerServiceSubscribeShutdownClient) Recv() (*ShutdownResponse, error) {
	m := new(ShutdownResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *actionServerServiceClient) SubscribeTerminate(ctx context.Context, in *SubscribeTerminateRequest, opts ...grpc.CallOption) (ActionServerService_SubscribeTerminateClient, error) {
	stream, err := c.cc.NewStream(ctx, &ActionServerService_ServiceDesc.Streams[6], "/mavsdk.rpc.action_server.ActionServerService/SubscribeTerminate", opts...)
	if err != nil {
		return nil, err
	}
	x := &actionServerServiceSubscribeTerminateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ActionServerService_SubscribeTerminateClient interface {
	Recv() (*TerminateResponse, error)
	grpc.ClientStream
}

type actionServerServiceSubscribeTerminateClient struct {
	grpc.ClientStream
}

func (x *actionServerServiceSubscribeTerminateClient) Recv() (*TerminateResponse, error) {
	m := new(TerminateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *actionServerServiceClient) SetAllowTakeoff(ctx context.Context, in *SetAllowTakeoffRequest, opts ...grpc.CallOption) (*SetAllowTakeoffResponse, error) {
	out := new(SetAllowTakeoffResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.action_server.ActionServerService/SetAllowTakeoff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServerServiceClient) SetArmable(ctx context.Context, in *SetArmableRequest, opts ...grpc.CallOption) (*SetArmableResponse, error) {
	out := new(SetArmableResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.action_server.ActionServerService/SetArmable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServerServiceClient) SetDisarmable(ctx context.Context, in *SetDisarmableRequest, opts ...grpc.CallOption) (*SetDisarmableResponse, error) {
	out := new(SetDisarmableResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.action_server.ActionServerService/SetDisarmable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServerServiceClient) SetAllowableFlightModes(ctx context.Context, in *SetAllowableFlightModesRequest, opts ...grpc.CallOption) (*SetAllowableFlightModesResponse, error) {
	out := new(SetAllowableFlightModesResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.action_server.ActionServerService/SetAllowableFlightModes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServerServiceClient) GetAllowableFlightModes(ctx context.Context, in *GetAllowableFlightModesRequest, opts ...grpc.CallOption) (*GetAllowableFlightModesResponse, error) {
	out := new(GetAllowableFlightModesResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.action_server.ActionServerService/GetAllowableFlightModes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActionServerServiceServer is the server API for ActionServerService service.
// All implementations must embed UnimplementedActionServerServiceServer
// for forward compatibility
type ActionServerServiceServer interface {
	// Subscribe to ARM/DISARM commands
	SubscribeArmDisarm(*SubscribeArmDisarmRequest, ActionServerService_SubscribeArmDisarmServer) error
	// Subscribe to DO_SET_MODE
	SubscribeFlightModeChange(*SubscribeFlightModeChangeRequest, ActionServerService_SubscribeFlightModeChangeServer) error
	// Subscribe to takeoff command
	SubscribeTakeoff(*SubscribeTakeoffRequest, ActionServerService_SubscribeTakeoffServer) error
	// Subscribe to land command
	SubscribeLand(*SubscribeLandRequest, ActionServerService_SubscribeLandServer) error
	// Subscribe to reboot command
	SubscribeReboot(*SubscribeRebootRequest, ActionServerService_SubscribeRebootServer) error
	// Subscribe to shutdown command
	SubscribeShutdown(*SubscribeShutdownRequest, ActionServerService_SubscribeShutdownServer) error
	// Subscribe to terminate command
	SubscribeTerminate(*SubscribeTerminateRequest, ActionServerService_SubscribeTerminateServer) error
	// Can the vehicle takeoff
	SetAllowTakeoff(context.Context, *SetAllowTakeoffRequest) (*SetAllowTakeoffResponse, error)
	// Can the vehicle arm when requested
	SetArmable(context.Context, *SetArmableRequest) (*SetArmableResponse, error)
	// Can the vehicle disarm when requested
	SetDisarmable(context.Context, *SetDisarmableRequest) (*SetDisarmableResponse, error)
	// Set which modes the vehicle can transition to (Manual always allowed)
	SetAllowableFlightModes(context.Context, *SetAllowableFlightModesRequest) (*SetAllowableFlightModesResponse, error)
	// Get which modes the vehicle can transition to (Manual always allowed)
	GetAllowableFlightModes(context.Context, *GetAllowableFlightModesRequest) (*GetAllowableFlightModesResponse, error)
	mustEmbedUnimplementedActionServerServiceServer()
}

// UnimplementedActionServerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedActionServerServiceServer struct {
}

func (UnimplementedActionServerServiceServer) SubscribeArmDisarm(*SubscribeArmDisarmRequest, ActionServerService_SubscribeArmDisarmServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeArmDisarm not implemented")
}
func (UnimplementedActionServerServiceServer) SubscribeFlightModeChange(*SubscribeFlightModeChangeRequest, ActionServerService_SubscribeFlightModeChangeServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeFlightModeChange not implemented")
}
func (UnimplementedActionServerServiceServer) SubscribeTakeoff(*SubscribeTakeoffRequest, ActionServerService_SubscribeTakeoffServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeTakeoff not implemented")
}
func (UnimplementedActionServerServiceServer) SubscribeLand(*SubscribeLandRequest, ActionServerService_SubscribeLandServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeLand not implemented")
}
func (UnimplementedActionServerServiceServer) SubscribeReboot(*SubscribeRebootRequest, ActionServerService_SubscribeRebootServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeReboot not implemented")
}
func (UnimplementedActionServerServiceServer) SubscribeShutdown(*SubscribeShutdownRequest, ActionServerService_SubscribeShutdownServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeShutdown not implemented")
}
func (UnimplementedActionServerServiceServer) SubscribeTerminate(*SubscribeTerminateRequest, ActionServerService_SubscribeTerminateServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeTerminate not implemented")
}
func (UnimplementedActionServerServiceServer) SetAllowTakeoff(context.Context, *SetAllowTakeoffRequest) (*SetAllowTakeoffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAllowTakeoff not implemented")
}
func (UnimplementedActionServerServiceServer) SetArmable(context.Context, *SetArmableRequest) (*SetArmableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetArmable not implemented")
}
func (UnimplementedActionServerServiceServer) SetDisarmable(context.Context, *SetDisarmableRequest) (*SetDisarmableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDisarmable not implemented")
}
func (UnimplementedActionServerServiceServer) SetAllowableFlightModes(context.Context, *SetAllowableFlightModesRequest) (*SetAllowableFlightModesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAllowableFlightModes not implemented")
}
func (UnimplementedActionServerServiceServer) GetAllowableFlightModes(context.Context, *GetAllowableFlightModesRequest) (*GetAllowableFlightModesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllowableFlightModes not implemented")
}
func (UnimplementedActionServerServiceServer) mustEmbedUnimplementedActionServerServiceServer() {}

// UnsafeActionServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActionServerServiceServer will
// result in compilation errors.
type UnsafeActionServerServiceServer interface {
	mustEmbedUnimplementedActionServerServiceServer()
}

func RegisterActionServerServiceServer(s grpc.ServiceRegistrar, srv ActionServerServiceServer) {
	s.RegisterService(&ActionServerService_ServiceDesc, srv)
}

func _ActionServerService_SubscribeArmDisarm_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeArmDisarmRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActionServerServiceServer).SubscribeArmDisarm(m, &actionServerServiceSubscribeArmDisarmServer{stream})
}

type ActionServerService_SubscribeArmDisarmServer interface {
	Send(*ArmDisarmResponse) error
	grpc.ServerStream
}

type actionServerServiceSubscribeArmDisarmServer struct {
	grpc.ServerStream
}

func (x *actionServerServiceSubscribeArmDisarmServer) Send(m *ArmDisarmResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ActionServerService_SubscribeFlightModeChange_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeFlightModeChangeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActionServerServiceServer).SubscribeFlightModeChange(m, &actionServerServiceSubscribeFlightModeChangeServer{stream})
}

type ActionServerService_SubscribeFlightModeChangeServer interface {
	Send(*FlightModeChangeResponse) error
	grpc.ServerStream
}

type actionServerServiceSubscribeFlightModeChangeServer struct {
	grpc.ServerStream
}

func (x *actionServerServiceSubscribeFlightModeChangeServer) Send(m *FlightModeChangeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ActionServerService_SubscribeTakeoff_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeTakeoffRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActionServerServiceServer).SubscribeTakeoff(m, &actionServerServiceSubscribeTakeoffServer{stream})
}

type ActionServerService_SubscribeTakeoffServer interface {
	Send(*TakeoffResponse) error
	grpc.ServerStream
}

type actionServerServiceSubscribeTakeoffServer struct {
	grpc.ServerStream
}

func (x *actionServerServiceSubscribeTakeoffServer) Send(m *TakeoffResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ActionServerService_SubscribeLand_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeLandRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActionServerServiceServer).SubscribeLand(m, &actionServerServiceSubscribeLandServer{stream})
}

type ActionServerService_SubscribeLandServer interface {
	Send(*LandResponse) error
	grpc.ServerStream
}

type actionServerServiceSubscribeLandServer struct {
	grpc.ServerStream
}

func (x *actionServerServiceSubscribeLandServer) Send(m *LandResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ActionServerService_SubscribeReboot_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRebootRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActionServerServiceServer).SubscribeReboot(m, &actionServerServiceSubscribeRebootServer{stream})
}

type ActionServerService_SubscribeRebootServer interface {
	Send(*RebootResponse) error
	grpc.ServerStream
}

type actionServerServiceSubscribeRebootServer struct {
	grpc.ServerStream
}

func (x *actionServerServiceSubscribeRebootServer) Send(m *RebootResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ActionServerService_SubscribeShutdown_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeShutdownRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActionServerServiceServer).SubscribeShutdown(m, &actionServerServiceSubscribeShutdownServer{stream})
}

type ActionServerService_SubscribeShutdownServer interface {
	Send(*ShutdownResponse) error
	grpc.ServerStream
}

type actionServerServiceSubscribeShutdownServer struct {
	grpc.ServerStream
}

func (x *actionServerServiceSubscribeShutdownServer) Send(m *ShutdownResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ActionServerService_SubscribeTerminate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeTerminateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActionServerServiceServer).SubscribeTerminate(m, &actionServerServiceSubscribeTerminateServer{stream})
}

type ActionServerService_SubscribeTerminateServer interface {
	Send(*TerminateResponse) error
	grpc.ServerStream
}

type actionServerServiceSubscribeTerminateServer struct {
	grpc.ServerStream
}

func (x *actionServerServiceSubscribeTerminateServer) Send(m *TerminateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ActionServerService_SetAllowTakeoff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAllowTakeoffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServerServiceServer).SetAllowTakeoff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.action_server.ActionServerService/SetAllowTakeoff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServerServiceServer).SetAllowTakeoff(ctx, req.(*SetAllowTakeoffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionServerService_SetArmable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetArmableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServerServiceServer).SetArmable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.action_server.ActionServerService/SetArmable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServerServiceServer).SetArmable(ctx, req.(*SetArmableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionServerService_SetDisarmable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDisarmableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServerServiceServer).SetDisarmable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.action_server.ActionServerService/SetDisarmable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServerServiceServer).SetDisarmable(ctx, req.(*SetDisarmableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionServerService_SetAllowableFlightModes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAllowableFlightModesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServerServiceServer).SetAllowableFlightModes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.action_server.ActionServerService/SetAllowableFlightModes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServerServiceServer).SetAllowableFlightModes(ctx, req.(*SetAllowableFlightModesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionServerService_GetAllowableFlightModes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllowableFlightModesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServerServiceServer).GetAllowableFlightModes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.action_server.ActionServerService/GetAllowableFlightModes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServerServiceServer).GetAllowableFlightModes(ctx, req.(*GetAllowableFlightModesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ActionServerService_ServiceDesc is the grpc.ServiceDesc for ActionServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActionServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mavsdk.rpc.action_server.ActionServerService",
	HandlerType: (*ActionServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetAllowTakeoff",
			Handler:    _ActionServerService_SetAllowTakeoff_Handler,
		},
		{
			MethodName: "SetArmable",
			Handler:    _ActionServerService_SetArmable_Handler,
		},
		{
			MethodName: "SetDisarmable",
			Handler:    _ActionServerService_SetDisarmable_Handler,
		},
		{
			MethodName: "SetAllowableFlightModes",
			Handler:    _ActionServerService_SetAllowableFlightModes_Handler,
		},
		{
			MethodName: "GetAllowableFlightModes",
			Handler:    _ActionServerService_GetAllowableFlightModes_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeArmDisarm",
			Handler:       _ActionServerService_SubscribeArmDisarm_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeFlightModeChange",
			Handler:       _ActionServerService_SubscribeFlightModeChange_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeTakeoff",
			Handler:       _ActionServerService_SubscribeTakeoff_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeLand",
			Handler:       _ActionServerService_SubscribeLand_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeReboot",
			Handler:       _ActionServerService_SubscribeReboot_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeShutdown",
			Handler:       _ActionServerService_SubscribeShutdown_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeTerminate",
			Handler:       _ActionServerService_SubscribeTerminate_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "action_server.proto",
}
