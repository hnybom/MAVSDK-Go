// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: core.proto

package core

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CoreServiceClient is the client API for CoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoreServiceClient interface {
	// Subscribe to 'connection state' updates.
	SubscribeConnectionState(ctx context.Context, in *SubscribeConnectionStateRequest, opts ...grpc.CallOption) (CoreService_SubscribeConnectionStateClient, error)
	// Set timeout of MAVLink transfers.
	//
	// The default timeout used is generally (0.5 seconds) seconds.
	// If MAVSDK is used on the same host this timeout can be reduced, while
	// if MAVSDK has to communicate over links with high latency it might
	// need to be increased to prevent timeouts.
	SetMavlinkTimeout(ctx context.Context, in *SetMavlinkTimeoutRequest, opts ...grpc.CallOption) (*SetMavlinkTimeoutResponse, error)
}

type coreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCoreServiceClient(cc grpc.ClientConnInterface) CoreServiceClient {
	return &coreServiceClient{cc}
}

func (c *coreServiceClient) SubscribeConnectionState(ctx context.Context, in *SubscribeConnectionStateRequest, opts ...grpc.CallOption) (CoreService_SubscribeConnectionStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &CoreService_ServiceDesc.Streams[0], "/mavsdk.rpc.core.CoreService/SubscribeConnectionState", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreServiceSubscribeConnectionStateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CoreService_SubscribeConnectionStateClient interface {
	Recv() (*ConnectionStateResponse, error)
	grpc.ClientStream
}

type coreServiceSubscribeConnectionStateClient struct {
	grpc.ClientStream
}

func (x *coreServiceSubscribeConnectionStateClient) Recv() (*ConnectionStateResponse, error) {
	m := new(ConnectionStateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coreServiceClient) SetMavlinkTimeout(ctx context.Context, in *SetMavlinkTimeoutRequest, opts ...grpc.CallOption) (*SetMavlinkTimeoutResponse, error) {
	out := new(SetMavlinkTimeoutResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.core.CoreService/SetMavlinkTimeout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreServiceServer is the server API for CoreService service.
// All implementations must embed UnimplementedCoreServiceServer
// for forward compatibility
type CoreServiceServer interface {
	// Subscribe to 'connection state' updates.
	SubscribeConnectionState(*SubscribeConnectionStateRequest, CoreService_SubscribeConnectionStateServer) error
	// Set timeout of MAVLink transfers.
	//
	// The default timeout used is generally (0.5 seconds) seconds.
	// If MAVSDK is used on the same host this timeout can be reduced, while
	// if MAVSDK has to communicate over links with high latency it might
	// need to be increased to prevent timeouts.
	SetMavlinkTimeout(context.Context, *SetMavlinkTimeoutRequest) (*SetMavlinkTimeoutResponse, error)
	mustEmbedUnimplementedCoreServiceServer()
}

// UnimplementedCoreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCoreServiceServer struct {
}

func (UnimplementedCoreServiceServer) SubscribeConnectionState(*SubscribeConnectionStateRequest, CoreService_SubscribeConnectionStateServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeConnectionState not implemented")
}
func (UnimplementedCoreServiceServer) SetMavlinkTimeout(context.Context, *SetMavlinkTimeoutRequest) (*SetMavlinkTimeoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMavlinkTimeout not implemented")
}
func (UnimplementedCoreServiceServer) mustEmbedUnimplementedCoreServiceServer() {}

// UnsafeCoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoreServiceServer will
// result in compilation errors.
type UnsafeCoreServiceServer interface {
	mustEmbedUnimplementedCoreServiceServer()
}

func RegisterCoreServiceServer(s grpc.ServiceRegistrar, srv CoreServiceServer) {
	s.RegisterService(&CoreService_ServiceDesc, srv)
}

func _CoreService_SubscribeConnectionState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeConnectionStateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoreServiceServer).SubscribeConnectionState(m, &coreServiceSubscribeConnectionStateServer{stream})
}

type CoreService_SubscribeConnectionStateServer interface {
	Send(*ConnectionStateResponse) error
	grpc.ServerStream
}

type coreServiceSubscribeConnectionStateServer struct {
	grpc.ServerStream
}

func (x *coreServiceSubscribeConnectionStateServer) Send(m *ConnectionStateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CoreService_SetMavlinkTimeout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMavlinkTimeoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).SetMavlinkTimeout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.core.CoreService/SetMavlinkTimeout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).SetMavlinkTimeout(ctx, req.(*SetMavlinkTimeoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CoreService_ServiceDesc is the grpc.ServiceDesc for CoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mavsdk.rpc.core.CoreService",
	HandlerType: (*CoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetMavlinkTimeout",
			Handler:    _CoreService_SetMavlinkTimeout_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeConnectionState",
			Handler:       _CoreService_SubscribeConnectionState_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "core.proto",
}
