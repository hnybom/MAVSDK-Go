// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: info.proto

package info

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InfoServiceClient is the client API for InfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InfoServiceClient interface {
	// Get flight information of the system.
	GetFlightInformation(ctx context.Context, in *GetFlightInformationRequest, opts ...grpc.CallOption) (*GetFlightInformationResponse, error)
	// Get the identification of the system.
	GetIdentification(ctx context.Context, in *GetIdentificationRequest, opts ...grpc.CallOption) (*GetIdentificationResponse, error)
	// Get product information of the system.
	GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*GetProductResponse, error)
	// Get the version information of the system.
	GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error)
	// Get the speed factor of a simulation (with lockstep a simulation can run faster or slower than realtime).
	GetSpeedFactor(ctx context.Context, in *GetSpeedFactorRequest, opts ...grpc.CallOption) (*GetSpeedFactorResponse, error)
}

type infoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInfoServiceClient(cc grpc.ClientConnInterface) InfoServiceClient {
	return &infoServiceClient{cc}
}

func (c *infoServiceClient) GetFlightInformation(ctx context.Context, in *GetFlightInformationRequest, opts ...grpc.CallOption) (*GetFlightInformationResponse, error) {
	out := new(GetFlightInformationResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.info.InfoService/GetFlightInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) GetIdentification(ctx context.Context, in *GetIdentificationRequest, opts ...grpc.CallOption) (*GetIdentificationResponse, error) {
	out := new(GetIdentificationResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.info.InfoService/GetIdentification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*GetProductResponse, error) {
	out := new(GetProductResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.info.InfoService/GetProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error) {
	out := new(GetVersionResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.info.InfoService/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) GetSpeedFactor(ctx context.Context, in *GetSpeedFactorRequest, opts ...grpc.CallOption) (*GetSpeedFactorResponse, error) {
	out := new(GetSpeedFactorResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.info.InfoService/GetSpeedFactor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfoServiceServer is the server API for InfoService service.
// All implementations must embed UnimplementedInfoServiceServer
// for forward compatibility
type InfoServiceServer interface {
	// Get flight information of the system.
	GetFlightInformation(context.Context, *GetFlightInformationRequest) (*GetFlightInformationResponse, error)
	// Get the identification of the system.
	GetIdentification(context.Context, *GetIdentificationRequest) (*GetIdentificationResponse, error)
	// Get product information of the system.
	GetProduct(context.Context, *GetProductRequest) (*GetProductResponse, error)
	// Get the version information of the system.
	GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error)
	// Get the speed factor of a simulation (with lockstep a simulation can run faster or slower than realtime).
	GetSpeedFactor(context.Context, *GetSpeedFactorRequest) (*GetSpeedFactorResponse, error)
	mustEmbedUnimplementedInfoServiceServer()
}

// UnimplementedInfoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInfoServiceServer struct {
}

func (UnimplementedInfoServiceServer) GetFlightInformation(context.Context, *GetFlightInformationRequest) (*GetFlightInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlightInformation not implemented")
}
func (UnimplementedInfoServiceServer) GetIdentification(context.Context, *GetIdentificationRequest) (*GetIdentificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdentification not implemented")
}
func (UnimplementedInfoServiceServer) GetProduct(context.Context, *GetProductRequest) (*GetProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedInfoServiceServer) GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedInfoServiceServer) GetSpeedFactor(context.Context, *GetSpeedFactorRequest) (*GetSpeedFactorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpeedFactor not implemented")
}
func (UnimplementedInfoServiceServer) mustEmbedUnimplementedInfoServiceServer() {}

// UnsafeInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InfoServiceServer will
// result in compilation errors.
type UnsafeInfoServiceServer interface {
	mustEmbedUnimplementedInfoServiceServer()
}

func RegisterInfoServiceServer(s grpc.ServiceRegistrar, srv InfoServiceServer) {
	s.RegisterService(&InfoService_ServiceDesc, srv)
}

func _InfoService_GetFlightInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlightInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).GetFlightInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.info.InfoService/GetFlightInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).GetFlightInformation(ctx, req.(*GetFlightInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_GetIdentification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdentificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).GetIdentification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.info.InfoService/GetIdentification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).GetIdentification(ctx, req.(*GetIdentificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.info.InfoService/GetProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).GetProduct(ctx, req.(*GetProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.info.InfoService/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).GetVersion(ctx, req.(*GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_GetSpeedFactor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpeedFactorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).GetSpeedFactor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.info.InfoService/GetSpeedFactor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).GetSpeedFactor(ctx, req.(*GetSpeedFactorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InfoService_ServiceDesc is the grpc.ServiceDesc for InfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mavsdk.rpc.info.InfoService",
	HandlerType: (*InfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFlightInformation",
			Handler:    _InfoService_GetFlightInformation_Handler,
		},
		{
			MethodName: "GetIdentification",
			Handler:    _InfoService_GetIdentification_Handler,
		},
		{
			MethodName: "GetProduct",
			Handler:    _InfoService_GetProduct_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _InfoService_GetVersion_Handler,
		},
		{
			MethodName: "GetSpeedFactor",
			Handler:    _InfoService_GetSpeedFactor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "info.proto",
}
