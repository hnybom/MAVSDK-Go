// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: param.proto

package param

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ParamServiceClient is the client API for ParamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParamServiceClient interface {
	// Get an int parameter.
	//
	// If the type is wrong, the result will be `WRONG_TYPE`.
	GetParamInt(ctx context.Context, in *GetParamIntRequest, opts ...grpc.CallOption) (*GetParamIntResponse, error)
	// Set an int parameter.
	//
	// If the type is wrong, the result will be `WRONG_TYPE`.
	SetParamInt(ctx context.Context, in *SetParamIntRequest, opts ...grpc.CallOption) (*SetParamIntResponse, error)
	// Get a float parameter.
	//
	// If the type is wrong, the result will be `WRONG_TYPE`.
	GetParamFloat(ctx context.Context, in *GetParamFloatRequest, opts ...grpc.CallOption) (*GetParamFloatResponse, error)
	// Set a float parameter.
	//
	// If the type is wrong, the result will be `WRONG_TYPE`.
	SetParamFloat(ctx context.Context, in *SetParamFloatRequest, opts ...grpc.CallOption) (*SetParamFloatResponse, error)
	// Get a custom parameter.
	//
	// If the type is wrong, the result will be `WRONG_TYPE`.
	GetParamCustom(ctx context.Context, in *GetParamCustomRequest, opts ...grpc.CallOption) (*GetParamCustomResponse, error)
	// Set a custom parameter.
	//
	// If the type is wrong, the result will be `WRONG_TYPE`.
	SetParamCustom(ctx context.Context, in *SetParamCustomRequest, opts ...grpc.CallOption) (*SetParamCustomResponse, error)
	// Get all parameters.
	GetAllParams(ctx context.Context, in *GetAllParamsRequest, opts ...grpc.CallOption) (*GetAllParamsResponse, error)
}

type paramServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewParamServiceClient(cc grpc.ClientConnInterface) ParamServiceClient {
	return &paramServiceClient{cc}
}

func (c *paramServiceClient) GetParamInt(ctx context.Context, in *GetParamIntRequest, opts ...grpc.CallOption) (*GetParamIntResponse, error) {
	out := new(GetParamIntResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.param.ParamService/GetParamInt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paramServiceClient) SetParamInt(ctx context.Context, in *SetParamIntRequest, opts ...grpc.CallOption) (*SetParamIntResponse, error) {
	out := new(SetParamIntResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.param.ParamService/SetParamInt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paramServiceClient) GetParamFloat(ctx context.Context, in *GetParamFloatRequest, opts ...grpc.CallOption) (*GetParamFloatResponse, error) {
	out := new(GetParamFloatResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.param.ParamService/GetParamFloat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paramServiceClient) SetParamFloat(ctx context.Context, in *SetParamFloatRequest, opts ...grpc.CallOption) (*SetParamFloatResponse, error) {
	out := new(SetParamFloatResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.param.ParamService/SetParamFloat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paramServiceClient) GetParamCustom(ctx context.Context, in *GetParamCustomRequest, opts ...grpc.CallOption) (*GetParamCustomResponse, error) {
	out := new(GetParamCustomResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.param.ParamService/GetParamCustom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paramServiceClient) SetParamCustom(ctx context.Context, in *SetParamCustomRequest, opts ...grpc.CallOption) (*SetParamCustomResponse, error) {
	out := new(SetParamCustomResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.param.ParamService/SetParamCustom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paramServiceClient) GetAllParams(ctx context.Context, in *GetAllParamsRequest, opts ...grpc.CallOption) (*GetAllParamsResponse, error) {
	out := new(GetAllParamsResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.param.ParamService/GetAllParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParamServiceServer is the server API for ParamService service.
// All implementations must embed UnimplementedParamServiceServer
// for forward compatibility
type ParamServiceServer interface {
	// Get an int parameter.
	//
	// If the type is wrong, the result will be `WRONG_TYPE`.
	GetParamInt(context.Context, *GetParamIntRequest) (*GetParamIntResponse, error)
	// Set an int parameter.
	//
	// If the type is wrong, the result will be `WRONG_TYPE`.
	SetParamInt(context.Context, *SetParamIntRequest) (*SetParamIntResponse, error)
	// Get a float parameter.
	//
	// If the type is wrong, the result will be `WRONG_TYPE`.
	GetParamFloat(context.Context, *GetParamFloatRequest) (*GetParamFloatResponse, error)
	// Set a float parameter.
	//
	// If the type is wrong, the result will be `WRONG_TYPE`.
	SetParamFloat(context.Context, *SetParamFloatRequest) (*SetParamFloatResponse, error)
	// Get a custom parameter.
	//
	// If the type is wrong, the result will be `WRONG_TYPE`.
	GetParamCustom(context.Context, *GetParamCustomRequest) (*GetParamCustomResponse, error)
	// Set a custom parameter.
	//
	// If the type is wrong, the result will be `WRONG_TYPE`.
	SetParamCustom(context.Context, *SetParamCustomRequest) (*SetParamCustomResponse, error)
	// Get all parameters.
	GetAllParams(context.Context, *GetAllParamsRequest) (*GetAllParamsResponse, error)
	mustEmbedUnimplementedParamServiceServer()
}

// UnimplementedParamServiceServer must be embedded to have forward compatible implementations.
type UnimplementedParamServiceServer struct {
}

func (UnimplementedParamServiceServer) GetParamInt(context.Context, *GetParamIntRequest) (*GetParamIntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParamInt not implemented")
}
func (UnimplementedParamServiceServer) SetParamInt(context.Context, *SetParamIntRequest) (*SetParamIntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetParamInt not implemented")
}
func (UnimplementedParamServiceServer) GetParamFloat(context.Context, *GetParamFloatRequest) (*GetParamFloatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParamFloat not implemented")
}
func (UnimplementedParamServiceServer) SetParamFloat(context.Context, *SetParamFloatRequest) (*SetParamFloatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetParamFloat not implemented")
}
func (UnimplementedParamServiceServer) GetParamCustom(context.Context, *GetParamCustomRequest) (*GetParamCustomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParamCustom not implemented")
}
func (UnimplementedParamServiceServer) SetParamCustom(context.Context, *SetParamCustomRequest) (*SetParamCustomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetParamCustom not implemented")
}
func (UnimplementedParamServiceServer) GetAllParams(context.Context, *GetAllParamsRequest) (*GetAllParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllParams not implemented")
}
func (UnimplementedParamServiceServer) mustEmbedUnimplementedParamServiceServer() {}

// UnsafeParamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParamServiceServer will
// result in compilation errors.
type UnsafeParamServiceServer interface {
	mustEmbedUnimplementedParamServiceServer()
}

func RegisterParamServiceServer(s grpc.ServiceRegistrar, srv ParamServiceServer) {
	s.RegisterService(&ParamService_ServiceDesc, srv)
}

func _ParamService_GetParamInt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParamIntRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParamServiceServer).GetParamInt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.param.ParamService/GetParamInt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParamServiceServer).GetParamInt(ctx, req.(*GetParamIntRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParamService_SetParamInt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetParamIntRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParamServiceServer).SetParamInt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.param.ParamService/SetParamInt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParamServiceServer).SetParamInt(ctx, req.(*SetParamIntRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParamService_GetParamFloat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParamFloatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParamServiceServer).GetParamFloat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.param.ParamService/GetParamFloat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParamServiceServer).GetParamFloat(ctx, req.(*GetParamFloatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParamService_SetParamFloat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetParamFloatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParamServiceServer).SetParamFloat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.param.ParamService/SetParamFloat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParamServiceServer).SetParamFloat(ctx, req.(*SetParamFloatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParamService_GetParamCustom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParamCustomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParamServiceServer).GetParamCustom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.param.ParamService/GetParamCustom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParamServiceServer).GetParamCustom(ctx, req.(*GetParamCustomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParamService_SetParamCustom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetParamCustomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParamServiceServer).SetParamCustom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.param.ParamService/SetParamCustom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParamServiceServer).SetParamCustom(ctx, req.(*SetParamCustomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParamService_GetAllParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParamServiceServer).GetAllParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.param.ParamService/GetAllParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParamServiceServer).GetAllParams(ctx, req.(*GetAllParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ParamService_ServiceDesc is the grpc.ServiceDesc for ParamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ParamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mavsdk.rpc.param.ParamService",
	HandlerType: (*ParamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetParamInt",
			Handler:    _ParamService_GetParamInt_Handler,
		},
		{
			MethodName: "SetParamInt",
			Handler:    _ParamService_SetParamInt_Handler,
		},
		{
			MethodName: "GetParamFloat",
			Handler:    _ParamService_GetParamFloat_Handler,
		},
		{
			MethodName: "SetParamFloat",
			Handler:    _ParamService_SetParamFloat_Handler,
		},
		{
			MethodName: "GetParamCustom",
			Handler:    _ParamService_GetParamCustom_Handler,
		},
		{
			MethodName: "SetParamCustom",
			Handler:    _ParamService_SetParamCustom_Handler,
		},
		{
			MethodName: "GetAllParams",
			Handler:    _ParamService_GetAllParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "param.proto",
}
