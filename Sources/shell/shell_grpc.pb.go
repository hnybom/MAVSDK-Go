// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: shell.proto

package shell

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShellServiceClient is the client API for ShellService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShellServiceClient interface {
	// Send a command line.
	Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error)
	// Receive feedback from a sent command line.
	//
	// This subscription needs to be made before a command line is sent, otherwise, no response will be sent.
	SubscribeReceive(ctx context.Context, in *SubscribeReceiveRequest, opts ...grpc.CallOption) (ShellService_SubscribeReceiveClient, error)
}

type shellServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShellServiceClient(cc grpc.ClientConnInterface) ShellServiceClient {
	return &shellServiceClient{cc}
}

func (c *shellServiceClient) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	out := new(SendResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.shell.ShellService/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shellServiceClient) SubscribeReceive(ctx context.Context, in *SubscribeReceiveRequest, opts ...grpc.CallOption) (ShellService_SubscribeReceiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &ShellService_ServiceDesc.Streams[0], "/mavsdk.rpc.shell.ShellService/SubscribeReceive", opts...)
	if err != nil {
		return nil, err
	}
	x := &shellServiceSubscribeReceiveClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ShellService_SubscribeReceiveClient interface {
	Recv() (*ReceiveResponse, error)
	grpc.ClientStream
}

type shellServiceSubscribeReceiveClient struct {
	grpc.ClientStream
}

func (x *shellServiceSubscribeReceiveClient) Recv() (*ReceiveResponse, error) {
	m := new(ReceiveResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ShellServiceServer is the server API for ShellService service.
// All implementations must embed UnimplementedShellServiceServer
// for forward compatibility
type ShellServiceServer interface {
	// Send a command line.
	Send(context.Context, *SendRequest) (*SendResponse, error)
	// Receive feedback from a sent command line.
	//
	// This subscription needs to be made before a command line is sent, otherwise, no response will be sent.
	SubscribeReceive(*SubscribeReceiveRequest, ShellService_SubscribeReceiveServer) error
	mustEmbedUnimplementedShellServiceServer()
}

// UnimplementedShellServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShellServiceServer struct {
}

func (UnimplementedShellServiceServer) Send(context.Context, *SendRequest) (*SendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedShellServiceServer) SubscribeReceive(*SubscribeReceiveRequest, ShellService_SubscribeReceiveServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeReceive not implemented")
}
func (UnimplementedShellServiceServer) mustEmbedUnimplementedShellServiceServer() {}

// UnsafeShellServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShellServiceServer will
// result in compilation errors.
type UnsafeShellServiceServer interface {
	mustEmbedUnimplementedShellServiceServer()
}

func RegisterShellServiceServer(s grpc.ServiceRegistrar, srv ShellServiceServer) {
	s.RegisterService(&ShellService_ServiceDesc, srv)
}

func _ShellService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShellServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.shell.ShellService/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShellServiceServer).Send(ctx, req.(*SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShellService_SubscribeReceive_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeReceiveRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ShellServiceServer).SubscribeReceive(m, &shellServiceSubscribeReceiveServer{stream})
}

type ShellService_SubscribeReceiveServer interface {
	Send(*ReceiveResponse) error
	grpc.ServerStream
}

type shellServiceSubscribeReceiveServer struct {
	grpc.ServerStream
}

func (x *shellServiceSubscribeReceiveServer) Send(m *ReceiveResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ShellService_ServiceDesc is the grpc.ServiceDesc for ShellService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShellService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mavsdk.rpc.shell.ShellService",
	HandlerType: (*ShellServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _ShellService_Send_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeReceive",
			Handler:       _ShellService_SubscribeReceive_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "shell.proto",
}
