// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: ftp.proto

package ftp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FtpServiceClient is the client API for FtpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FtpServiceClient interface {
	// Resets FTP server in case there are stale open sessions.
	Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetResponse, error)
	// Downloads a file to local directory.
	SubscribeDownload(ctx context.Context, in *SubscribeDownloadRequest, opts ...grpc.CallOption) (FtpService_SubscribeDownloadClient, error)
	// Uploads local file to remote directory.
	SubscribeUpload(ctx context.Context, in *SubscribeUploadRequest, opts ...grpc.CallOption) (FtpService_SubscribeUploadClient, error)
	// Lists items from a remote directory.
	ListDirectory(ctx context.Context, in *ListDirectoryRequest, opts ...grpc.CallOption) (*ListDirectoryResponse, error)
	// Creates a remote directory.
	CreateDirectory(ctx context.Context, in *CreateDirectoryRequest, opts ...grpc.CallOption) (*CreateDirectoryResponse, error)
	// Removes a remote directory.
	RemoveDirectory(ctx context.Context, in *RemoveDirectoryRequest, opts ...grpc.CallOption) (*RemoveDirectoryResponse, error)
	// Removes a remote file.
	RemoveFile(ctx context.Context, in *RemoveFileRequest, opts ...grpc.CallOption) (*RemoveFileResponse, error)
	// Renames a remote file or remote directory.
	Rename(ctx context.Context, in *RenameRequest, opts ...grpc.CallOption) (*RenameResponse, error)
	// Compares a local file to a remote file using a CRC32 checksum.
	AreFilesIdentical(ctx context.Context, in *AreFilesIdenticalRequest, opts ...grpc.CallOption) (*AreFilesIdenticalResponse, error)
	// Set root directory for MAVLink FTP server.
	SetRootDirectory(ctx context.Context, in *SetRootDirectoryRequest, opts ...grpc.CallOption) (*SetRootDirectoryResponse, error)
	// Set target component ID. By default it is the autopilot.
	SetTargetCompid(ctx context.Context, in *SetTargetCompidRequest, opts ...grpc.CallOption) (*SetTargetCompidResponse, error)
	// Get our own component ID.
	GetOurCompid(ctx context.Context, in *GetOurCompidRequest, opts ...grpc.CallOption) (*GetOurCompidResponse, error)
}

type ftpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFtpServiceClient(cc grpc.ClientConnInterface) FtpServiceClient {
	return &ftpServiceClient{cc}
}

func (c *ftpServiceClient) Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetResponse, error) {
	out := new(ResetResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.ftp.FtpService/Reset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ftpServiceClient) SubscribeDownload(ctx context.Context, in *SubscribeDownloadRequest, opts ...grpc.CallOption) (FtpService_SubscribeDownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &FtpService_ServiceDesc.Streams[0], "/mavsdk.rpc.ftp.FtpService/SubscribeDownload", opts...)
	if err != nil {
		return nil, err
	}
	x := &ftpServiceSubscribeDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FtpService_SubscribeDownloadClient interface {
	Recv() (*DownloadResponse, error)
	grpc.ClientStream
}

type ftpServiceSubscribeDownloadClient struct {
	grpc.ClientStream
}

func (x *ftpServiceSubscribeDownloadClient) Recv() (*DownloadResponse, error) {
	m := new(DownloadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ftpServiceClient) SubscribeUpload(ctx context.Context, in *SubscribeUploadRequest, opts ...grpc.CallOption) (FtpService_SubscribeUploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &FtpService_ServiceDesc.Streams[1], "/mavsdk.rpc.ftp.FtpService/SubscribeUpload", opts...)
	if err != nil {
		return nil, err
	}
	x := &ftpServiceSubscribeUploadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FtpService_SubscribeUploadClient interface {
	Recv() (*UploadResponse, error)
	grpc.ClientStream
}

type ftpServiceSubscribeUploadClient struct {
	grpc.ClientStream
}

func (x *ftpServiceSubscribeUploadClient) Recv() (*UploadResponse, error) {
	m := new(UploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ftpServiceClient) ListDirectory(ctx context.Context, in *ListDirectoryRequest, opts ...grpc.CallOption) (*ListDirectoryResponse, error) {
	out := new(ListDirectoryResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.ftp.FtpService/ListDirectory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ftpServiceClient) CreateDirectory(ctx context.Context, in *CreateDirectoryRequest, opts ...grpc.CallOption) (*CreateDirectoryResponse, error) {
	out := new(CreateDirectoryResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.ftp.FtpService/CreateDirectory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ftpServiceClient) RemoveDirectory(ctx context.Context, in *RemoveDirectoryRequest, opts ...grpc.CallOption) (*RemoveDirectoryResponse, error) {
	out := new(RemoveDirectoryResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.ftp.FtpService/RemoveDirectory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ftpServiceClient) RemoveFile(ctx context.Context, in *RemoveFileRequest, opts ...grpc.CallOption) (*RemoveFileResponse, error) {
	out := new(RemoveFileResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.ftp.FtpService/RemoveFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ftpServiceClient) Rename(ctx context.Context, in *RenameRequest, opts ...grpc.CallOption) (*RenameResponse, error) {
	out := new(RenameResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.ftp.FtpService/Rename", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ftpServiceClient) AreFilesIdentical(ctx context.Context, in *AreFilesIdenticalRequest, opts ...grpc.CallOption) (*AreFilesIdenticalResponse, error) {
	out := new(AreFilesIdenticalResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.ftp.FtpService/AreFilesIdentical", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ftpServiceClient) SetRootDirectory(ctx context.Context, in *SetRootDirectoryRequest, opts ...grpc.CallOption) (*SetRootDirectoryResponse, error) {
	out := new(SetRootDirectoryResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.ftp.FtpService/SetRootDirectory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ftpServiceClient) SetTargetCompid(ctx context.Context, in *SetTargetCompidRequest, opts ...grpc.CallOption) (*SetTargetCompidResponse, error) {
	out := new(SetTargetCompidResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.ftp.FtpService/SetTargetCompid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ftpServiceClient) GetOurCompid(ctx context.Context, in *GetOurCompidRequest, opts ...grpc.CallOption) (*GetOurCompidResponse, error) {
	out := new(GetOurCompidResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.ftp.FtpService/GetOurCompid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FtpServiceServer is the server API for FtpService service.
// All implementations must embed UnimplementedFtpServiceServer
// for forward compatibility
type FtpServiceServer interface {
	// Resets FTP server in case there are stale open sessions.
	Reset(context.Context, *ResetRequest) (*ResetResponse, error)
	// Downloads a file to local directory.
	SubscribeDownload(*SubscribeDownloadRequest, FtpService_SubscribeDownloadServer) error
	// Uploads local file to remote directory.
	SubscribeUpload(*SubscribeUploadRequest, FtpService_SubscribeUploadServer) error
	// Lists items from a remote directory.
	ListDirectory(context.Context, *ListDirectoryRequest) (*ListDirectoryResponse, error)
	// Creates a remote directory.
	CreateDirectory(context.Context, *CreateDirectoryRequest) (*CreateDirectoryResponse, error)
	// Removes a remote directory.
	RemoveDirectory(context.Context, *RemoveDirectoryRequest) (*RemoveDirectoryResponse, error)
	// Removes a remote file.
	RemoveFile(context.Context, *RemoveFileRequest) (*RemoveFileResponse, error)
	// Renames a remote file or remote directory.
	Rename(context.Context, *RenameRequest) (*RenameResponse, error)
	// Compares a local file to a remote file using a CRC32 checksum.
	AreFilesIdentical(context.Context, *AreFilesIdenticalRequest) (*AreFilesIdenticalResponse, error)
	// Set root directory for MAVLink FTP server.
	SetRootDirectory(context.Context, *SetRootDirectoryRequest) (*SetRootDirectoryResponse, error)
	// Set target component ID. By default it is the autopilot.
	SetTargetCompid(context.Context, *SetTargetCompidRequest) (*SetTargetCompidResponse, error)
	// Get our own component ID.
	GetOurCompid(context.Context, *GetOurCompidRequest) (*GetOurCompidResponse, error)
	mustEmbedUnimplementedFtpServiceServer()
}

// UnimplementedFtpServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFtpServiceServer struct {
}

func (UnimplementedFtpServiceServer) Reset(context.Context, *ResetRequest) (*ResetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (UnimplementedFtpServiceServer) SubscribeDownload(*SubscribeDownloadRequest, FtpService_SubscribeDownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeDownload not implemented")
}
func (UnimplementedFtpServiceServer) SubscribeUpload(*SubscribeUploadRequest, FtpService_SubscribeUploadServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeUpload not implemented")
}
func (UnimplementedFtpServiceServer) ListDirectory(context.Context, *ListDirectoryRequest) (*ListDirectoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDirectory not implemented")
}
func (UnimplementedFtpServiceServer) CreateDirectory(context.Context, *CreateDirectoryRequest) (*CreateDirectoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDirectory not implemented")
}
func (UnimplementedFtpServiceServer) RemoveDirectory(context.Context, *RemoveDirectoryRequest) (*RemoveDirectoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDirectory not implemented")
}
func (UnimplementedFtpServiceServer) RemoveFile(context.Context, *RemoveFileRequest) (*RemoveFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFile not implemented")
}
func (UnimplementedFtpServiceServer) Rename(context.Context, *RenameRequest) (*RenameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rename not implemented")
}
func (UnimplementedFtpServiceServer) AreFilesIdentical(context.Context, *AreFilesIdenticalRequest) (*AreFilesIdenticalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AreFilesIdentical not implemented")
}
func (UnimplementedFtpServiceServer) SetRootDirectory(context.Context, *SetRootDirectoryRequest) (*SetRootDirectoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRootDirectory not implemented")
}
func (UnimplementedFtpServiceServer) SetTargetCompid(context.Context, *SetTargetCompidRequest) (*SetTargetCompidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTargetCompid not implemented")
}
func (UnimplementedFtpServiceServer) GetOurCompid(context.Context, *GetOurCompidRequest) (*GetOurCompidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOurCompid not implemented")
}
func (UnimplementedFtpServiceServer) mustEmbedUnimplementedFtpServiceServer() {}

// UnsafeFtpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FtpServiceServer will
// result in compilation errors.
type UnsafeFtpServiceServer interface {
	mustEmbedUnimplementedFtpServiceServer()
}

func RegisterFtpServiceServer(s grpc.ServiceRegistrar, srv FtpServiceServer) {
	s.RegisterService(&FtpService_ServiceDesc, srv)
}

func _FtpService_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FtpServiceServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.ftp.FtpService/Reset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FtpServiceServer).Reset(ctx, req.(*ResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FtpService_SubscribeDownload_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeDownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FtpServiceServer).SubscribeDownload(m, &ftpServiceSubscribeDownloadServer{stream})
}

type FtpService_SubscribeDownloadServer interface {
	Send(*DownloadResponse) error
	grpc.ServerStream
}

type ftpServiceSubscribeDownloadServer struct {
	grpc.ServerStream
}

func (x *ftpServiceSubscribeDownloadServer) Send(m *DownloadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FtpService_SubscribeUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeUploadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FtpServiceServer).SubscribeUpload(m, &ftpServiceSubscribeUploadServer{stream})
}

type FtpService_SubscribeUploadServer interface {
	Send(*UploadResponse) error
	grpc.ServerStream
}

type ftpServiceSubscribeUploadServer struct {
	grpc.ServerStream
}

func (x *ftpServiceSubscribeUploadServer) Send(m *UploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FtpService_ListDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FtpServiceServer).ListDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.ftp.FtpService/ListDirectory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FtpServiceServer).ListDirectory(ctx, req.(*ListDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FtpService_CreateDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FtpServiceServer).CreateDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.ftp.FtpService/CreateDirectory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FtpServiceServer).CreateDirectory(ctx, req.(*CreateDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FtpService_RemoveDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FtpServiceServer).RemoveDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.ftp.FtpService/RemoveDirectory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FtpServiceServer).RemoveDirectory(ctx, req.(*RemoveDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FtpService_RemoveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FtpServiceServer).RemoveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.ftp.FtpService/RemoveFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FtpServiceServer).RemoveFile(ctx, req.(*RemoveFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FtpService_Rename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FtpServiceServer).Rename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.ftp.FtpService/Rename",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FtpServiceServer).Rename(ctx, req.(*RenameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FtpService_AreFilesIdentical_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AreFilesIdenticalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FtpServiceServer).AreFilesIdentical(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.ftp.FtpService/AreFilesIdentical",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FtpServiceServer).AreFilesIdentical(ctx, req.(*AreFilesIdenticalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FtpService_SetRootDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRootDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FtpServiceServer).SetRootDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.ftp.FtpService/SetRootDirectory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FtpServiceServer).SetRootDirectory(ctx, req.(*SetRootDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FtpService_SetTargetCompid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTargetCompidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FtpServiceServer).SetTargetCompid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.ftp.FtpService/SetTargetCompid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FtpServiceServer).SetTargetCompid(ctx, req.(*SetTargetCompidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FtpService_GetOurCompid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOurCompidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FtpServiceServer).GetOurCompid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.ftp.FtpService/GetOurCompid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FtpServiceServer).GetOurCompid(ctx, req.(*GetOurCompidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FtpService_ServiceDesc is the grpc.ServiceDesc for FtpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FtpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mavsdk.rpc.ftp.FtpService",
	HandlerType: (*FtpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Reset",
			Handler:    _FtpService_Reset_Handler,
		},
		{
			MethodName: "ListDirectory",
			Handler:    _FtpService_ListDirectory_Handler,
		},
		{
			MethodName: "CreateDirectory",
			Handler:    _FtpService_CreateDirectory_Handler,
		},
		{
			MethodName: "RemoveDirectory",
			Handler:    _FtpService_RemoveDirectory_Handler,
		},
		{
			MethodName: "RemoveFile",
			Handler:    _FtpService_RemoveFile_Handler,
		},
		{
			MethodName: "Rename",
			Handler:    _FtpService_Rename_Handler,
		},
		{
			MethodName: "AreFilesIdentical",
			Handler:    _FtpService_AreFilesIdentical_Handler,
		},
		{
			MethodName: "SetRootDirectory",
			Handler:    _FtpService_SetRootDirectory_Handler,
		},
		{
			MethodName: "SetTargetCompid",
			Handler:    _FtpService_SetTargetCompid_Handler,
		},
		{
			MethodName: "GetOurCompid",
			Handler:    _FtpService_GetOurCompid_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeDownload",
			Handler:       _FtpService_SubscribeDownload_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeUpload",
			Handler:       _FtpService_SubscribeUpload_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ftp.proto",
}
